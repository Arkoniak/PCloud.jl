var documenterSearchIndex = {"docs":
[{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"CurrentModule = PCloud","category":"page"},{"location":"examples/#Usage-examples","page":"Usage examples","title":"Usage examples","text":"","category":"section"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Here you can find different snippets which can help in building fast and simple data pipelines with the usage of PCloud.jl. These snippets are not the best possible ways to solve problems, but they can be used as a starting point. Also they illustrate ways how to apply various Julia techniques such as broadcasting and anonymous functions together with pCloud to achieve goals without too much efforts.","category":"page"},{"location":"examples/#Uploading-and-downloading-CSV","page":"Usage examples","title":"Uploading and downloading CSV","text":"","category":"section"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"CSV is rather common format for storing data, and CSV.jl provides convenient function CSV.write which can store data in IOBuffer which in turn can be uploaded to pCloud.","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Let's create DataFrame","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"using CSV\nusing DataFrames\nusing Random\n\ndf = DataFrame(x = rand(10), y = rand(1:10, 10), z = [randstring(5) for _ in 1:10])\n# 10×3 DataFrame\n# │ Row │ x         │ y     │ z      │\n# │     │ Float64   │ Int64 │ String │\n# ├─────┼───────────┼───────┼────────┤\n# │ 1   │ 0.0756344 │ 6     │ H3BIk  │\n# │ 2   │ 0.396882  │ 5     │ Rv2SB  │\n# │ 3   │ 0.797529  │ 5     │ M61Hw  │\n# │ 4   │ 0.856915  │ 5     │ jLc7K  │\n# │ 5   │ 0.0120147 │ 1     │ HgZMA  │\n# │ 6   │ 0.493593  │ 3     │ ENfu3  │\n# │ 7   │ 0.27618   │ 2     │ MIU5B  │\n# │ 8   │ 0.492329  │ 10    │ QflU7  │\n# │ 9   │ 0.398613  │ 10    │ 4XioP  │\n# │ 10  │ 0.40273   │ 10    │ PQs14  │","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"To store this dataframe in pCloud we write it's contents to IOBuffer and upload resulting buffer to pCloud with the help of uploadfile function","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"using PCloud\nusing PCloud: uploadfile, getfilelink\n\ntoken = # HERE SHOULD BE YOUR TOKEN\nclient = PCloudClient(auth_token = token)\n\nbuffer = CSV.write(IOBuffer, df)\nres = uploadfile(client, files = \"data.csv\" => buf)","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Returned reponse res contains necessary information about resulting file. And to get it back we can use getfilelink","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"using UrlDownload\nusing Underscores\n\ndf2 = @_ getfilelink(client, fileid = first(res.fileids)) |>\n    urldownload(\"https://\" * first(__.hosts) * __.path) |> DataFrame\n# 10×3 DataFrame\n# │ Row │ x         │ y     │ z      │\n# │     │ Float64   │ Int64 │ String │\n# ├─────┼───────────┼───────┼────────┤\n# │ 1   │ 0.0756344 │ 6     │ H3BIk  │\n# │ 2   │ 0.396882  │ 5     │ Rv2SB  │\n# │ 3   │ 0.797529  │ 5     │ M61Hw  │\n# │ 4   │ 0.856915  │ 5     │ jLc7K  │\n# │ 5   │ 0.0120147 │ 1     │ HgZMA  │\n# │ 6   │ 0.493593  │ 3     │ ENfu3  │\n# │ 7   │ 0.27618   │ 2     │ MIU5B  │\n# │ 8   │ 0.492329  │ 10    │ QflU7  │\n# │ 9   │ 0.398613  │ 10    │ 4XioP  │\n# │ 10  │ 0.40273   │ 10    │ PQs14  │","category":"page"},{"location":"examples/#Working-with-comressed-CSV","page":"Usage examples","title":"Working with comressed CSV","text":"","category":"section"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Since csv files can be rather large it is a common practice to compress them before uploading. It can be done as follows (assuming the same df from the previous example)","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"using CodecZlib\n\nbuf = CSV.write(IOBuffer(), df) |> seekstart |> GzipCompressorStream\nres = uploadfile(client, files = \"data.csv.gz\" => buf)","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Note that we should use seekstart here, since after IOBuffer is written, it's pointer located at the end and subsequent reading of the buffer in uploadfile return empty array. Also, in this exampe we used GzipCompressorStream, but any other compressing algorithm can be used, refer TranscodingStreams.jl.","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"And to verify the result of upload","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"using UrlDownload\nusing Underscores\n\ndf2 = @_ getfilelink(client, fileid = first(res.fileids)) |> \n   urldownload(\"https://\" * first(__.hosts) * __.path) |> DataFrame \n# 10×3 DataFrame\n# │ Row │ x         │ y     │ z      │\n# │     │ Float64   │ Int64 │ String │\n# ├─────┼───────────┼───────┼────────┤\n# │ 1   │ 0.0756344 │ 6     │ H3BIk  │\n# │ 2   │ 0.396882  │ 5     │ Rv2SB  │\n# │ 3   │ 0.797529  │ 5     │ M61Hw  │\n# │ 4   │ 0.856915  │ 5     │ jLc7K  │\n# │ 5   │ 0.0120147 │ 1     │ HgZMA  │\n# │ 6   │ 0.493593  │ 3     │ ENfu3  │\n# │ 7   │ 0.27618   │ 2     │ MIU5B  │\n# │ 8   │ 0.492329  │ 10    │ QflU7  │\n# │ 9   │ 0.398613  │ 10    │ 4XioP  │\n# │ 10  │ 0.40273   │ 10    │ PQs14  │","category":"page"},{"location":"examples/#Uploading-generated-image","page":"Usage examples","title":"Uploading generated image","text":"","category":"section"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"In this example we will use Luxor.jl for image generation and also use getfilepublink to generate public link to the resulting image.","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"using Luxor\n\nd = Drawing(600, 400, :png)\norigin()\nbackground(\"white\")\nfor θ in range(0, step=π/8, length=16)\n    gsave()\n    scale(0.25)\n    rotate(θ)\n    translate(250, 0)\n    randomhue()\n    julialogo(action=:fill, color=false)\n    grestore()\nend\n\ngsave()\nscale(0.3)\njuliacircles()\ngrestore()\n\ntranslate(200, -150)\nscale(0.3)\njulialogo()\nfinish()","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Please notice, that we used :png keyword in Drawing definition, to force in-memory image processing.","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"using PCloud\nusing PCloud: uploadfile, getfilepublink\n\ntoken = # HERE SHOULD BE YOUR TOKEN\nclient = PCloudClient(auth_token = token)\n\nres = uploadfile(client, files = \"logo.png\" => d.buffer)\n\ngetfilepublink(client, fileid = first(res.fileids)).link\n# \"https://u.pcloud.link/publink/show?code=XZh8FEkZ6vBed7DI1Wys8g7BHl8FFVuhUSSX\"","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"If you follow this link, you can see that it is valid png file.","category":"page"},{"location":"examples/#Project-Gutenberg-and-downloadfile","page":"Usage examples","title":"Project Gutenberg and downloadfile","text":"","category":"section"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Method PCloud.downloadfile can download file from urls directly to pCloud. This can be very useful during web crawling, when various information of interest should be saved for further investigation. As an example we download 10 top books from Project Gutenberg","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"using Underscores\nusing Gumbo\nusing Cascadia\nusing Cascadia: matchFirst\nusing UrlDownload\nusing PCloud\nusing PCloud: createfolder, downloadfile\n\ntoken = # HERE SHOULD BE YOUR TOKEN\nclient = PCloudClient(auth_token = token)\n\n# folder where books will be stored\nfolderid = createfolder(client, folderid = 0, name = \"Gutenberg\").metadata.folderid\n\nhost = \"https://www.gutenberg.org\"\n\n# helper function for parsing data downloaded by `urldownload` to a more useful format\npageparser(x) = parsehtml(String(x)).root\n\n# helper function which finds download url on each book page\n# should be used for parsing each individual book page, for example\n# getlink(\"https://www.gutenberg.org/ebooks/1342\") would produce url to\n# \"Pride and Prejudice\" in epub format.\ngetlink(url) = @_ urldownload(url, parser = pageparser) |>\n    host*matchFirst(sel\"a[type='application/epub+zip']\", __).attributes[\"href\"]\n    \n# This is central function, which parses top scores page, extract top 10 books,\n# extract download url for each book with the help of `getlink` and finally\n# download everything to pCloud\n@_ urldownload(\"https://www.gutenberg.org/browse/scores/top\", parser = pageparser) |>\n    matchFirst(sel\"ol\", __) |> eachmatch(sel\"li\", __)[1:10] |>\n    matchFirst.(Ref(sel\"a\"), __) |> map(host*_.attributes[\"href\"], __) |>\n    getlink.(__) |> join(__, \" \") |>\n    downloadfile(client, url = __, folderid = folderid)","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"CurrentModule = PCloud","category":"page"},{"location":"reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/#General","page":"API Reference","title":"General","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.getdigest\nPCloud.userinfo\nPCloud.supportedlanguages\nPCloud.setlanguage\nPCloud.feedback\nPCloud.currentserver\nPCloud.diff\nPCloud.getfilehistory\nPCloud.getip\nPCloud.getapiserver","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/general/getdigest.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getdigest","category":"page"},{"location":"reference/#PCloud.API.getdigest","page":"API Reference","title":"PCloud.API.getdigest","text":"getdigest(client::PCloudClient; kwargs...)\n\nReturns a digest for digest authentication. Digests are valid for 30 seconds.\n\nSource: https://docs.pcloud.com/methods/general/getdigest.html\n\nOutput\n\ndigest::String: the digest for authentication\nexpires::datetime: when the digest expires\n\nOutput Example\n\n{\n    result: 0,\n    digest: \"YGtAxbUpI85Zvs7lC7Z62rBwv907TBXhV2L867Hkh\",\n    expires: \"Fri, 27 Sep 2013 10:15:46 +0000\"\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/general/userinfo.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"userinfo","category":"page"},{"location":"reference/#PCloud.API.userinfo","page":"API Reference","title":"PCloud.API.userinfo","text":"userinfo(client::PCloudClient; kwargs...)\n\nReturns information about the current user. As there is no specific login method as credentials can be passed to any method, this is an especially good place for logging in with no particular action in mind.\n\nSource: https://docs.pcloud.com/methods/general/userinfo.html\n\nOutput\n\nemail::String: email address of the user\nemailverified::Bool: true if the user had verified it's email\nregistered::datetime: when the user was registerd\npremium::Bool: true if the user is premium\npremiumexpires::datetime: if premium is true: premiumexpires will be the date until the service is\nquota::Int: in bytes\nusedquota::Int: in bytes, so quite big numbers\nlanguage::String: 2-3 characters lowercase languageid\n\nOutput Example\n\n{\n    result: 0, \n    userid: 1234,\n  email: pcloud@pcloud.com,\n  emailverified: true,\n  registered: \"Mon, 18 Nov 2013 15:32:05 +0000\",\n  language: \"en\",\n    premium: false,\n  usedquota: 500,\n  quota: 1000    \n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/general/supportedlanguages.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"supportedlanguages","category":"page"},{"location":"reference/#PCloud.API.supportedlanguages","page":"API Reference","title":"PCloud.API.supportedlanguages","text":"supportedlanguages(client::PCloudClient; kwargs...)\n\nLists supported languages in the returned languages hash, where keys are language codes and values are languages names\n\nSource: https://docs.pcloud.com/methods/general/supportedlanguages.html\n\nOutput Example\n\n{\n    result: 0,\n    languages: {\n        en: \"English\",\n        ...\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/general/setlanguage.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"setlanguage","category":"page"},{"location":"reference/#PCloud.API.setlanguage","page":"API Reference","title":"PCloud.API.setlanguage","text":"setlanguage(client::PCloudClient; kwargs...)\n\nSets user's language to language.\n\nSource: https://docs.pcloud.com/methods/general/setlanguage.html\n\nArguments\n\nlanguage::String: the language to be set\n\nOutput Example\n\n{\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/general/feedback.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"feedback","category":"page"},{"location":"reference/#PCloud.API.feedback","page":"API Reference","title":"PCloud.API.feedback","text":"feedback(client::PCloudClient; kwargs...)\n\nSends message to pCloud support\n\nSource: https://docs.pcloud.com/methods/general/feedback.html\n\nArguments\n\nmail::String: email of the user\nreason::String: subject of the request\nmessage::String: the message itself\n\nOptional Arguments\n\nname::String: can be provided with users full name\n\nOutput Example\n\n{\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/general/currentserver.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"currentserver","category":"page"},{"location":"reference/#PCloud.API.currentserver","page":"API Reference","title":"PCloud.API.currentserver","text":"currentserver(client::PCloudClient; kwargs...)\n\nReturns ip and hostname of the server you are currently connected to. The hostname is guaranteed to resolve only to the IP address(es) pointing to the same server. This call is useful when you need to track the upload progress.\n\nSource: https://docs.pcloud.com/methods/general/currentserver.html\n\nOutput\n\nip::String: IP v.4 address of the server\nipbin::String: IP v.4 address\nipv6::String: IP v.6 address of the server\nhostname::String: hostname of the server\n\nOutput Example\n\n{\n    ipv6: \"::1\",\n    hostname: \"api7.pcloud.com\",\n    ip: \"204.155.155.21\",\n    result: 0,\n    ipbin: \"204.155.155.60\"\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/general/diff.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"diff","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/general/getfilehistory.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getfilehistory","category":"page"},{"location":"reference/#PCloud.API.getfilehistory","page":"API Reference","title":"PCloud.API.getfilehistory","text":"getfilehistory(client::PCloudClient; kwargs...)\n\nReturns event history of a file identified by fileid. File might be a deleted one. The output format is the same as of diff method.\n\nSource: https://docs.pcloud.com/methods/general/getfilehistory.html\n\nArguments\n\nfileid::Int: fileid of a file that history is requested for\n\nOutput Example\n\n{\n  \"result\": 0,\n  \"entries\": [\n    {\n      \"event\": \"createfile\",\n      \"time\": \"Mon, 14 Oct 2013 03:24:43 +0000\",\n      \"diffid\": 13924,\n      \"metadata\": {\n        \"isshared\": true,\n        \"thumb\": false,\n        \"contenttype\": \"video/mp4\",\n        \"size\": 0,\n        \"category\": 2,\n        \"hash\": 14841775194319522618,\n        \"parentfolderid\": 397140,\n        \"modified\": \"Mon, 14 Oct 2013 03:24:43 +0000\",\n        \"isfolder\": false,\n        \"created\": \"Mon, 14 Oct 2013 03:24:43 +0000\",\n        \"fileid\": 2712167,\n        \"id\": \"f2712167\",\n        \"icon\": \"video\",\n        \"name\": \"GOPR0002.MP4\",\n        \"ismine\": true\n      }\n    },\n    {\n      \"event\": \"modifyfile\",\n      \"time\": \"Mon, 14 Oct 2013 04:07:25 +0000\",\n      \"diffid\": 13927,\n      \"metadata\": {\n        \"isshared\": true,\n        \"thumb\": true,\n        \"contenttype\": \"video/mp4\",\n        \"size\": 1993278633,\n        \"category\": 2,\n        \"hash\": 4322830267003041431,\n        \"parentfolderid\": 397140,\n        \"modified\": \"Mon, 14 Oct 2013 04:07:25 +0000\",\n        \"isfolder\": false,\n        \"created\": \"Mon, 14 Oct 2013 03:24:43 +0000\",\n        \"fileid\": 2712167,\n        \"id\": \"f2712167\",\n        \"icon\": \"video\",\n        \"name\": \"GOPR0002.MP4\",\n        \"ismine\": true\n      }\n    }\n  ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/general/getip.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getip","category":"page"},{"location":"reference/#PCloud.API.getip","page":"API Reference","title":"PCloud.API.getip","text":"getip(client::PCloudClient; kwargs...)\n\nGet the IP address of the remote device from which the user connects to the API.\n\nSource: https://docs.pcloud.com/methods/general/getip.html\n\nOutput\n\nReturns ip - the remote address of the user that is connecting to the API.\n\nAlso, returns country - lowercase two-letter code of the country that is defined according to the remote address. If the country could not be defined, then this fields is false.\n\nOutput Example\n\n{\n  \"result\": 0,\n  \"ip\": \"127.0.0.1\",\n  \"country\": \"gb\"\n  ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/general/getapiserver.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getapiserver","category":"page"},{"location":"reference/#PCloud.API.getapiserver","page":"API Reference","title":"PCloud.API.getapiserver","text":"getapiserver(client::PCloudClient; kwargs...)\n\nThis method returns closest API server to the requesting client. The biggest speed gain will be with upload methods. Clients should have fallback logic. If request to API server different from api.pcloud.com fails (network error) the client should fallback to using api.pcloud.com.\n\nSource: https://docs.pcloud.com/methods/general/getapiserver.html\n\nOutput\n\nbinapi - array with API servers that support connections via pCloud's binary protocol\n\napi - array with API servers that support connections via HTTP/HTTPS protocol\n\nOutput Example\n\n{\n  \"result\": 0,\n  \"binapi\": [\n    \"binapi-ams1.pcloud.com\"\n  ],\n  \"api\": [\n    \"api-ams1.pcloud.com\"\n  ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/#Folder","page":"API Reference","title":"Folder","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.createfolder\nPCloud.createfolderifnotexists\nPCloud.listfolder\nPCloud.renamefolder\nPCloud.deletefolder\nPCloud.deletefolderrecursive\nPCloud.copyfolder","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/folder/createfolder.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"createfolder","category":"page"},{"location":"reference/#PCloud.API.createfolder","page":"API Reference","title":"PCloud.API.createfolder","text":"createfolder(client::PCloudClient; kwargs...)\n\nCreates a folder.\n\nExpects either path string parameter (discouraged) or int folderid and string name parameters.\n\nSource: https://docs.pcloud.com/methods/folder/createfolder.html\n\nArguments\n\npath::String: path to the folder(discouraged)\nfolderid::Int: id of the folder\nname::String: name of the folder\n\nUse path or folderid + name\n\nOutput\n\nUpon success returns metadata structure.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"metadata\": {\n        \"created\": \"Wed, 02 Oct 2013 13:11:53 +0000\",\n        \"isfolder\": true,\n        \"parentfolderid\": 0,\n        \"icon\": \"folder\",\n        \"id\": \"d230807\",\n        \"path\": \"/new folder\",\n        \"modified\": \"Wed, 02 Oct 2013 13:11:53 +0000\",\n        \"thumb\": false,\n        \"folderid\": 230807,\n        \"isshared\": false,\n        \"ismine\": true,\n        \"name\": \"New folder\"\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/folder/createfolderifnotexists.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"createfolderifnotexists","category":"page"},{"location":"reference/#PCloud.API.createfolderifnotexists","page":"API Reference","title":"PCloud.API.createfolderifnotexists","text":"createfolderifnotexists(client::PCloudClient; kwargs...)\n\nCreates a folder if the folder doesn't exist or returns the existing folder's metadata.\n\nExpects either path string parameter (discouraged) or int folderid and string name parameters.\n\nSource: https://docs.pcloud.com/methods/folder/createfolderifnotexists.html\n\nArguments\n\npath::String: path to the folder(discouraged)\nfolderid::Int: id of the folder\nname::String: name of the folder\n\nUse path or folderid + name\n\nOutput\n\nUpon success returns metadata structure.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"created\": true,\n    \"metadata\": {\n        \"created\": \"Wed, 02 Oct 2013 13:11:53 +0000\",\n        \"isfolder\": true,\n        \"parentfolderid\": 0,\n        \"icon\": \"folder\",\n        \"id\": \"d230807\",\n        \"path\": \"/new folder\",\n        \"modified\": \"Wed, 02 Oct 2013 13:11:53 +0000\",\n        \"thumb\": false,\n        \"folderid\": 230807,\n        \"isshared\": false,\n        \"ismine\": true,\n        \"name\": \"New folder\"\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/folder/listfolder.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"listfolder","category":"page"},{"location":"reference/#PCloud.API.listfolder","page":"API Reference","title":"PCloud.API.listfolder","text":"listfolder(client::PCloudClient; kwargs...)\n\nReceive data for a folder.\n\nExpects folderid or path parameter, returns folder's metadata. The metadata will have contents field that is array of metadatas of folder's contents.\n\nRecursively listing the root folder is not an expensive operation.\n\nSource: https://docs.pcloud.com/methods/folder/listfolder.html\n\nArguments\n\npath::String: path to the folder(discouraged)\nfolderid::Int: id of the folder\n\nUse path or folderid\n\nOptional Arguments\n\nrecursive::Int: If is set full directory tree will be returned, which means that all directories will have contents filed.\nshowdeleted::Int: If is set, deleted files and folders that can be undeleted will be displayed.\nnofiles::Int: If is set, only the folder (sub)structure will be returned.\nnoshares::Int: If is set, only user's own folders and files will be displayed.\n\nOutput\n\nReturns folder's metadata. The metadata will have contents field that is array of metadatas of folder's contents.\n\nOutput Example\n\n{\n    result: 0,\n    metadata: {\n        icon: \"folder\",\n        id: \"d0\",\n        modified: \"Thu, 19 Sep 2013 07:31:46 +0000\",\n        path: \"/\",\n        thumb: false,\n        created: \"Thu, 19 Sep 2013 07:31:46 +0000\",\n        folderid: 0,\n        isshared: false,\n        isfolder: true,\n        ismine: true,\n        name: \"/\",\n        contents: [\n            {\n                parentfolderid: 0,\n                id: \"d230807\",\n                modified: \"Wed, 02 Oct 2013 13:23:35 +0000\",\n                path: \"/Simple Folder\",\n                thumb: false,\n                created: \"Wed, 02 Oct 2013 13:11:53 +0000\",\n                folderid: 230807,\n                ismine: true,\n                isshared: false,\n                isfolder: true,\n                name: \"Simple Folder\",\n                icon: \"folder\"\n            }, {\n                icon: \"audio\",\n                contenttype: \"audio/mpeg\",\n                parentfolderid: 0,\n                modified: \"Wed, 02 Oct 2013 13:23:19 +0000\",\n                path: \"/Simple Audio.mp3\",\n                hash: 5380817599554757000,\n                thumb: false,\n                created: \"Wed, 02 Oct 2013 13:23:19 +0000\",\n                id: \"f1723778\",\n                ismine: true,\n                category: 3,\n                fileid: 1723778,\n                isshared: false,\n                isfolder: false,\n                name: \"Simple Audio.mp3\",\n                size: 11252576\n            }]\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/folder/renamefolder.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"renamefolder","category":"page"},{"location":"reference/#PCloud.API.renamefolder","page":"API Reference","title":"PCloud.API.renamefolder","text":"renamefolder(client::PCloudClient; kwargs...)\n\nRenames (and/or moves) a folder identified by folderid or path to either topath (if topath is a existing folder to place source folder without new name for the folder it MUST end with slash - /newpath/) or tofolderid/toname (one or both can be provided).\n\nSource: https://docs.pcloud.com/methods/folder/renamefolder.html\n\nOutput\n\nReturns metadata of the renamed folder.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"metadata\": {\n        \"parentfolderid\": 0,\n        \"id\": \"d230807\",\n        \"modified\": \"Wed, 02 Oct 2013 13:23:35 +0000\",\n        \"thumb\": false,\n        \"created\": \"Wed, 02 Oct 2013 13:11:53 +0000\",\n        \"folderid\": 230807,\n        \"ismine\": true,\n        \"isshared\": false,\n        \"isfolder\": true,\n        \"name\": \"Simple Folder\",\n        \"icon\": \"folder\"\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/folder/deletefolder.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"deletefolder","category":"page"},{"location":"reference/#PCloud.API.deletefolder","page":"API Reference","title":"PCloud.API.deletefolder","text":"deletefolder(client::PCloudClient; kwargs...)\n\nDeletes a folder\n\nExpects either path string parameter (discouraged) or int folderid parameter.\n\nNote: Folders must be empty before calling deletefolder.\n\nSource: https://docs.pcloud.com/methods/folder/deletefolder.html\n\nArguments\n\npath::String: path to the folder (discouraged)\nfolderid::Int: id of the folder\n\nOutput\n\nUpon success returns metadata structure of the deleted folder.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"id\": \"111-0\",\n    \"metadata\": {\n        \"icon\": \"folder\",\n        \"parentfolderid\": 0,\n        \"isfolder\": true,\n        \"isdeleted\": true,\n        \"created\": \"Wed, 02 Oct 2013 13:11:53 +0000\",\n        \"modified\": \"Wed, 02 Oct 2013 13:31:49 +0000\",\n        \"isshared\": false,\n        \"name\": \"Simple Folder\",\n        \"id\": \"d230807\",\n        \"folderid\": 230807,\n        \"ismine\": true,\n        \"thumb\": false\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/folder/deletefolderrecursive.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"deletefolderrecursive","category":"page"},{"location":"reference/#PCloud.API.deletefolderrecursive","page":"API Reference","title":"PCloud.API.deletefolderrecursive","text":"deletefolderrecursive(client::PCloudClient; kwargs...)\n\nDeletes a folder\n\nExpects either path string parameter (discouraged) or int folderid parameter.\n\nNote: This function deletes files, directories, and removes sharing. Use with extreme care.\n\nSource: https://docs.pcloud.com/methods/folder/deletefolderrecursive.html\n\nArguments\n\npath::String: path to the folder (discouraged)\nfolderid::Int: id of the folder\n\nOutput\n\nUpon success returns int deletedfiles - the number of deleted files and int deletedfolders - number of deleted folders.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"deletedfiles\": 30,\n    \"deletedfolders\": 5\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/folder/copyfolder.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"copyfolder","category":"page"},{"location":"reference/#PCloud.API.copyfolder","page":"API Reference","title":"PCloud.API.copyfolder","text":"copyfolder(client::PCloudClient; kwargs...)\n\nCopies a folder identified by folderid or path to either topath or tofolderid.\n\nSource: https://docs.pcloud.com/methods/folder/copyfolder.html\n\nArguments\n\nfolderid::Int: id of the source folder\npath::String: path of the source folder\ntofolderid::Int: id of destination folder\ntopath::String: destination path\n\nOptional Arguments\n\nnoover::Int: If it is set and files with the same name already exist, no overwriting will be preformed and error 2004 will be returned\nskipexisting::Int: If set will skip files that already exist\ncopycontentonly::Int: If it is set only the content of source folder will be copied otherwise the folder itself is copied\n\nOutput\n\nReturns metadata of the created folder.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"metadata\": {\n        \"parentfolderid\": 0,\n        \"id\": \"d230807\",\n        \"modified\": \"Wed, 02 Oct 2013 13:23:35 +0000\",\n        \"thumb\": false,\n        \"created\": \"Wed, 02 Oct 2013 13:11:53 +0000\",\n        \"folderid\": 230807,\n        \"ismine\": true,\n        \"isshared\": false,\n        \"isfolder\": true,\n        \"name\": \"Simple Folder\",\n        \"icon\": \"folder\"\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/#File","page":"API Reference","title":"File","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.uploadfile\nPCloud.uploadprogress\nPCloud.downloadfile\nPCloud.downloadfileasync\nPCloud.copyfile\nPCloud.checksumfile\nPCloud.deletefile\nPCloud.renamefile\nPCloud.stat","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/file/uploadfile.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"uploadfile","category":"page"},{"location":"reference/#PCloud.API.uploadfile","page":"API Reference","title":"PCloud.API.uploadfile","text":"uploadfile(client::PCloudClient; kwargs...)\n\nUpload a file.\n\nString path or int folderid specify the target directory. If both are omitted the root folder is selected.\n\nParameter string progresshash can be passed. Same should be passed to uploadprogress method.\n\nIf nopartial is set, partially uploaded files will not be saved (that is when the connection breaks before file is read in full). If renameifexists is set, on name conflict, files will not be overwritten but renamed to name like filename (2).ext.\n\nMultiple files can be uploaded, using POST with multipart/form-data encoding. If passed by POST, the parameters must come before files. All files are accepted, the name of the form field is ignored. Multiple files can come one or more HTML file controls.\n\nFilenames must be passed as filename property of each file, that is - the way browsers send the file names.\n\nIf a file with the same name already exists in the directory, it is overwritten and old one is saved as revision. Overwriting a file with the same data does nothing except updating the modification time of the file.\n\nSource: https://docs.pcloud.com/methods/file/uploadfile.html\n\nArguments\n\npath::String: path to the folder(discouraged)\nfolderid::Int: id of the folder\nfilename::String: the filename of each uploaded file\n\nOptional Arguments\n\nnopartial::Int: If is set, partially uploaded files will not be saved\nprogresshash::String: hash used for observing upload progress\nrenameifexists::Int: if set, the uploaded file will be renamed, if file with the requested name exists in the folder.\nmtime::Int: if set, file modified time is set. Have to be unix time seconds.\nctime::Int: if set, file created time is set. It's required to provide mtime to set ctime. Have to be unix time seconds.\n\nOutput\n\nReturns two arrays - fileids and metadata.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"fileids\": [\n        1729212\n    ],\n    \"metadata\": [\n        {\n          \"ismine\": true,\n          \"id\": \"f1729212\",\n          \"created\": \"Wed, 02 Oct 2013 14:29:11 +0000\",\n          \"modified\": \"Wed, 02 Oct 2013 14:29:11 +0000\",\n          \"hash\": 10681749967730527559,\n          \"isshared\": false,\n          \"isfolder\": false,\n          \"category\": 1,\n          \"parentfolderid\": 0,\n          \"icon\": \"image\",\n          \"fileid\": 1729212,\n          \"height\": 600,\n          \"width\": 900,\n          \"path\": \"/Simple image.jpg\",\n          \"name\": \"Simple image.jpg\",\n          \"contenttype\": \"image/jpeg\",\n          \"size\": 73269,\n          \"thumb\": true\n        }\n    ]\n}\n\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/file/uploadprogress.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"uploadprogress","category":"page"},{"location":"reference/#PCloud.API.uploadprogress","page":"API Reference","title":"PCloud.API.uploadprogress","text":"uploadprogress(client::PCloudClient; kwargs...)\n\nGet upload progress of a file.\n\nMUST be sent to the same api server that you are currently uploading to. The parameter string progresshash MUST be passed and must contain the same value that was passed in the upload request that is currently in progress.\n\nSource: https://docs.pcloud.com/methods/file/uploadprogress.html\n\nArguments\n\nprogresshash::String: hash defining the upload, same as sent to uploadfile\n\nOutput\n\nUpon success returns fields:\n\ntotal: total bytes to be transferred (that is the Content-Length of the upload request)\nuploaded: bytes uploaded so far\ncurrentfile: the filename of the file that is currently being uploaded\nfiles: metadata of the already uploaded files (without the current one)\nfinished: indicates if the upload is finished or not\n\nFor finished uploads currentfile and currentfileuploaded are not present.\n\nKeep in mind that total and uploaded include the protocol overhead and metadata, currentfileuploaded does not.\n\nOutput Example\n\n{\n    \"currentfile\": \"Simple file\",\n    \"currentfileuploaded\": 4199743,\n    \"result\": 0,\n    \"total\": 7768889,\n    \"filenumber\": 1,\n    \"uploaded\": 4199936,\n    \"finished\": false,\n    \"files\": [ ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/file/downloadfile.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"downloadfile","category":"page"},{"location":"reference/#PCloud.API.downloadfile","page":"API Reference","title":"PCloud.API.downloadfile","text":"downloadfile(client::PCloudClient; kwargs...)\n\nDownload a file/s\n\nDownloads one or more files from links suplied in the url parameter (links separated by any amount of whitespace) to the folder identified by either path or folderid (or to the root folder if both are omitted).\n\nThe parameter string progresshash can be passed. The same should be passed to uploadprogress method.\n\nWhen monitoring progress with uploadprogress the following fields will be present:\n\nurlcount::Int: number of URLs requested\nurlready::Int: number of URLs already downloaded\nurlworking::Int: number of currently downloading URLs\nfinished::Bool: true if all URLs are downloaded\nfiles::array: of objects\n\nEach record in files has:- url::String: the url\n\nstatus::String: One of:waiting the link is waiting for its turn to be downloaded\n\ndownloading the link is currently being downloaded\n\nready the file pointed by url is already downloaded\n\nerror error occured while downloading (timeout, 404, server not responding)\n\nsize::Int: available only for started downloads only when the server supplied Content-Length - the size of the file\ndownloaded::Int: available only for started downloads - number of bytes downloaded so far (goes up to size)\nmetadata::metadata: available only for ready downloads - the metadata of the file in the user's filesystem\n\nThe files are saved with the names, that are defined from the urls given. These names could be set, using the parameter target, which should contain comma-separeted urlencoded list of the desired names. The n-th name in this sequence is given to the n-th url from url parameter.\n\nNote that not all urls could have name given with target. If so, leave the name empty ( 'name%20A,,name%20C' ), or stop the list on the last desired name (urls can be more than target names).\n\nSource: https://docs.pcloud.com/methods/file/downloadfile.html\n\nArguments\n\nurl::String: links separated by any amount of whitespace\n\nOptional Arguments\n\npath::String: path to folder, in which to download the files\nfolderid::String: folderid of the folder, in which to download the files\ntarget::String: desired names for the downloaded files\n\nIf path or folderid are not present, then root folder is used\n\nOutput\n\nThe method returns when all files are downloaded (which might take time). On success metadata array with metadata of all downloaded files is returned.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"metadata\": [\n        {\n            \"icon\": \"image\",\n            \"path\": \"Simple image.jpg\",\n            \"isshared\": false,\n            \"ismine\": true,\n            \"fileid\": 1736716,\n            \"size\": 15604,\n            \"category\": 1,\n            \"name\": \"Simple image.jpg\",\n            \"created\": \"Wed, 02 Oct 2013 15:57:13 +0000\",\n            \"hash\": 6306013028049022731,\n            \"parentfolderid\": 0,\n            \"modified\": \"Wed, 02 Oct 2013 15:57:28 +0000\",\n            \"thumb\": true,\n            \"isfolder\": false,\n            \"height\": 300,\n            \"width\": 222,\n            \"id\": \"f1736716\",\n            \"contenttype\": \"image/jpeg\"\n        }\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/file/downloadfileasync.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"downloadfileasync","category":"page"},{"location":"reference/#PCloud.API.downloadfileasync","page":"API Reference","title":"PCloud.API.downloadfileasync","text":"downloadfileasync(client::PCloudClient; kwargs...)\n\nDownload a file/s\n\nDownloads one or more files from links suplied in the url parameter (links separated by any amount of whitespace) to the folder identified by either path or folderid (or to the root folder if both are omitted). The response will be recieved when the files are queued for download, not when they are downloaded. The parameter string progresshash can be passed. The same should be passed to uploadprogress method. When monitoring progress with uploadprogress the following fields will be present:\n\nurlcount::Int: number of URLs requested\nurlready::Int: number of URLs already downloaded\nurlworking::Int: number of currently downloading URLs\nfinished::Bool: true if all URLs are downloaded\nfiles::array: of objects\n\nEach record in files has:- url::String: the url\n\nstatus::String: One of:waiting the link is waiting for its turn to be downloadeddownloading the link is currently being downloadedready the file pointed by url is already downloadederror error occured while downloading (timeout, 404, server not responding)\nsize::Int: available only for started downloads only when the server supplied Content-Length - the size of the file\ndownloaded::Int: available only for started downloads - number of bytes downloaded so far (goes up to size)\nmetadata::metadata: available only for ready downloads - the metadata of the file in the user's filesystem\n\nThe files are saved with the names, that are defined from the urls given. These names could be set, using the parameter target, which should contain comma-separeted urlencoded list of the desired names. The n-th name in this sequence is given to the n-th url from url parameter.\n\nNote that not all urls could have name given with target. If so, leave the name empty ( 'name%20A,,name%20C' ), or stop the list on the last desired name (urls can be more than target names).\n\nSource: https://docs.pcloud.com/methods/file/downloadfileasync.html\n\nArguments\n\nurl::String: links separated by any amount of whitespace\n\nOptional Arguments\n\npath::String: path to folder, in which to download the files\nfolderid::String: folderid of the folder, in which to download the files\ntarget::String: desired names for the downloaded files\n\nIf path or folderid are not present, then root folder is used\n\nOutput\n\nThe method returns when all files are downloaded (which might take time). On success metadata array with metadata of all downloaded files is returned.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"metadata\": [\n        {\n            \"icon\": \"image\",\n            \"path\": \"Simple image.jpg\",\n            \"isshared\": false,\n            \"ismine\": true,\n            \"fileid\": 1736716,\n            \"size\": 15604,\n            \"category\": 1,\n            \"name\": \"Simple image.jpg\",\n            \"created\": \"Wed, 02 Oct 2013 15:57:13 +0000\",\n            \"hash\": 6306013028049022731,\n            \"parentfolderid\": 0,\n            \"modified\": \"Wed, 02 Oct 2013 15:57:28 +0000\",\n            \"thumb\": true,\n            \"isfolder\": false,\n            \"height\": 300,\n            \"width\": 222,\n            \"id\": \"f1736716\",\n            \"contenttype\": \"image/jpeg\"\n        }\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/file/copyfile.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"copyfile","category":"page"},{"location":"reference/#PCloud.API.copyfile","page":"API Reference","title":"PCloud.API.copyfile","text":"copyfile(client::PCloudClient; kwargs...)\n\nTakes one file and copies it as another file in the user's filesystem.\n\nExpects fileid or path to identify the source file and tofolderid+toname or topath to identify destination filename.\n\nIf toname is ommited, original filename is used.\n\nThe same is true if the last character of topath is '/' (slash), thus identifying only the target folder. The target file will be separate, newly created (with current creation time unless old file is overwritten) independent file.\n\nAny future operations on either the source or destination file will not modify the other one.\n\nThis call is useful when you want to create a public link from somebody else's file (shared with you).\n\nSource: https://docs.pcloud.com/methods/file/copyfile.html\n\nArguments\n\nfileid::Int: id of the target file\npath::String: path to the target file\ntofolderid::Int: id of destination folder\ntopath::String: destination path\n\nNote that not all are required at single method call\n\nOptional Arguments\n\ntoname::String: name of the destination file. If omitted, then the original filename is used\nnoover::Int: If it is set and file with the specified name already exists, no overwriting will be preformed\nmtime::Int: if set, file modified time is set. Have to be unix time seconds.\nctime::Int: if set, file created time is set. It's required to provide mtime to set ctime. Have to be unix time seconds.\n\nOutput\n\nUpon success returns metadata of the destination file ( the copy result ).\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"metadata\": {\n        \"category\": 1,\n        \"width\": 900,\n        \"thumb\": true,\n        \"created\": \"Wed, 02 Oct 2013 15:05:17 +0000\",\n        \"hash\": 10681749967730527559,\n        \"icon\": \"image\",\n        \"ismine\": true,\n        \"name\": \"Simple image.jpg\",\n        \"modified\": \"Wed, 02 Oct 2013 15:05:17 +0000\",\n        \"isfolder\": false,\n        \"contenttype\": \"image/jpeg\",\n        \"fileid\": 1732283,\n        \"isshared\": false,\n        \"id\": \"f1732283\",\n        \"size\": 73269,\n        \"parentfolderid\": 28110,\n        \"height\": 600\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/file/checksumfile.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"checksumfile","category":"page"},{"location":"reference/#PCloud.API.checksumfile","page":"API Reference","title":"PCloud.API.checksumfile","text":"checksumfile(client::PCloudClient; kwargs...)\n\nCalculate checksums of a given file\n\nSource: https://docs.pcloud.com/methods/file/checksumfile.html\n\nArguments\n\nfileid::Int: id of the checked file\npath::String: path to the checked file\n\nNote that fileid or path could be used at once\n\nOutput\n\nUpon success returns metadata, md5 and sha1 checksums of the file.\n\nOutput Example\n\n{\n    sha1: \"ef2109a0b10ed2033f7ca11c0b62284c5e7fc860\",\n    md5: \"4d200fbf4f7b5ea6eb1877d50e3d6c12\",\n    metadata: {\n        size: 73269,\n        parentfolderid: 0,\n        width: 900,\n        fileid: 1729212,\n        contenttype: \"image/jpeg\",\n        hash: 10681749967730528000,\n        id: \"f1729212\",\n        isfolder: false,\n        thumb: true,\n        name: \"Simple image.jpg\",\n        modified: \"Wed, 02 Oct 2013 15:05:09 +0000\",\n        isshared: false,\n        height: 600,\n        category: 1,\n        ismine: true,\n        created: \"Wed, 02 Oct 2013 14:29:11 +0000\",\n        icon: \"image\"\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/file/deletefile.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"deletefile","category":"page"},{"location":"reference/#PCloud.API.deletefile","page":"API Reference","title":"PCloud.API.deletefile","text":"deletefile(client::PCloudClient; kwargs...)\n\nDelete a file identified by fileid or path.\n\nSource: https://docs.pcloud.com/methods/file/deletefile.html\n\nArguments\n\nfileid::Int: ID of the deleted file\npath::String: Path to the deleted file\n\nUse fileid or path\n\nOutput\n\nOn success returns file's metadata with isdeleted set.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"id\": \"139-0\",\n    \"metadata\": {\n        \"isfolder\": false,\n        \"icon\": \"image\",\n        \"size\": 15604,\n        \"name\": \"Simple image.jpg\",\n        \"category\": 1,\n        \"contenttype\": \"image/jpeg\",\n        \"parentfolderid\": 0,\n        \"isdeleted\": true,\n        \"hash\": 6306013028049022731,\n        \"ismine\": true,\n        \"isshared\": false,\n        \"id\": \"f1736716\",\n        \"height\": 300,\n        \"width\": 222,\n        \"modified\": \"Wed, 02 Oct 2013 16:00:40 +0000\",\n        \"thumb\": true,\n        \"created\": \"Wed, 02 Oct 2013 15:57:13 +0000\",\n        \"fileid\": 1736716\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/file/renamefile.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"renamefile","category":"page"},{"location":"reference/#PCloud.API.renamefile","page":"API Reference","title":"PCloud.API.renamefile","text":"renamefile(client::PCloudClient; kwargs...)\n\nRename a file\n\nRenames (and/or moves) a file identified by fileid or path to either topath (if topath is a foldername without new filename it MUST end with slash - /newpath/) or tofolderid/toname (one or both can be provided).\n\nIf the destination file already exists it will be replaced atomically with the source file, in this case the metadata will include deletedfileid with the fileid of the old file at the destination, and the source and destination files revisions will be merged together.\n\nSource: https://docs.pcloud.com/methods/file/renamefile.html\n\nArguments\n\nfileid::Int: ID of the renamed file\npath::String: Path to the renamed file\ntopath::String: Destination path of renamed file\ntofolderid::Int: Id of the folder to which the file is moved\ntoname::String: Destination filename of the renamed file\n\nUse fileid or path\n\nOutput\n\nOn success returns renamed file's metadata with deletedfileid if merged file.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"metadata\": {\n        \"id\": \"f1729212\",\n        \"fileid\": 1729212,\n        \"size\": 73269,\n        \"isfolder\": false,\n        \"hash\": 10681749967730527559,\n        \"isshared\": false,\n        \"thumb\": true,\n        \"height\": 600,\n        \"contenttype\": \"image/jpeg\",\n        \"icon\": \"image\",\n        \"created\": \"Wed, 02 Oct 2013 14:29:11 +0000\",\n        \"width\": 900,\n        \"modified\": \"Wed, 02 Oct 2013 16:07:40 +0000\",\n        \"ismine\": true,\n        \"name\": \"My picture.jpg\",\n        \"category\": 1,\n        \"parentfolderid\": 0\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/file/stat.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"stat","category":"page"},{"location":"reference/#Auth","page":"API Reference","title":"Auth","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.sendverificationemail\nPCloud.verifyemail\nPCloud.changepassword\nPCloud.lostpassword\nPCloud.resetpassword\nPCloud.register\nPCloud.invite\nPCloud.userinvites\nPCloud.logout\nPCloud.listtokens\nPCloud.deletetoken\nPCloud.sendchangemail\nPCloud.changemail\nPCloud.senddeactivatemail\nPCloud.deactivateuser","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/sendverificationemail.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendverificationemail","category":"page"},{"location":"reference/#PCloud.API.sendverificationemail","page":"API Reference","title":"PCloud.API.sendverificationemail","text":"sendverificationemail(client::PCloudClient; kwargs...)\n\nSends email to the logged in user with email activation link.\n\nTakes no parameters.\n\nSource: https://docs.pcloud.com/methods/auth/sendverificationemail.html\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/verifyemail.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"verifyemail","category":"page"},{"location":"reference/#PCloud.API.verifyemail","page":"API Reference","title":"PCloud.API.verifyemail","text":"verifyemail(client::PCloudClient; kwargs...)\n\nVerify an email\n\nExpects parameter code that is the activation code sent in validation emails.\n\nIn case of valid code, validates user's email address and returns email and userid of the verified user.\n\nPlease keep in mind that the code might be for a user, different than the currently logged one (if any).\n\nSource: https://docs.pcloud.com/methods/auth/verifyemail.html\n\nArguments\n\ncode::String: activation code sent in validation emails\n\nOutput\n\nemail::String: email of the user\nuserid::Int: id of the user\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"email\": \"pcloud@pcloud.com\",\n    \"userid\": 1234\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/changepassword.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"changepassword","category":"page"},{"location":"reference/#PCloud.API.changepassword","page":"API Reference","title":"PCloud.API.changepassword","text":"changepassword(client::PCloudClient; kwargs...)\n\nChange current user's password\n\nTakes oldpassword that must contain user's old password and newpassword and changes user's password.\n\nNew password should be at least 6 characters in length, contain at least 4 different characters, cannot be all consecutive characters (either alphabet or numbers, neither of the following is valid 'abcdef', '123456', '987654') and cannot be all consecutive letters from a standard keyboard (no 'qwerty' or 'poiuyt'). Also the password can not start or end with whitespace.\n\nSource: https://docs.pcloud.com/methods/auth/changepassword.html\n\nArguments\n\noldpassword::String: current password of the user\nnewpassword::String: the wished password that will overwrite the current\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/lostpassword.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"lostpassword","category":"page"},{"location":"reference/#PCloud.API.lostpassword","page":"API Reference","title":"PCloud.API.lostpassword","text":"lostpassword(client::PCloudClient; kwargs...)\n\nChange current user's password\n\nTakes as a parameter user's mail and sends to this email address insertuctions and link to reset user's password.\n\nSuccessful reply is sent even if there is no user of the system with mail for security reasons.\n\nSource: https://docs.pcloud.com/methods/auth/lostpassword.html\n\nArguments\n\nmail::String: e-mail of the user, where instructions are sent\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/resetpassword.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"resetpassword","category":"page"},{"location":"reference/#PCloud.API.resetpassword","page":"API Reference","title":"PCloud.API.resetpassword","text":"resetpassword(client::PCloudClient; kwargs...)\n\nReset user's password\n\nExpect as parameters code as sent in email in lostpassword\n\nResets user's password to newpassword.\n\nThe new password is subject to the same checks as in changepassword.\n\nSource: https://docs.pcloud.com/methods/auth/resetpassword.html\n\nArguments\n\ncode::String: code sent to the user in lostpassword\nnewpassword::String: the new password of the user\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/register.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"register","category":"page"},{"location":"reference/#PCloud.API.register","page":"API Reference","title":"PCloud.API.register","text":"register(client::PCloudClient; kwargs...)\n\nRegister a new user account\n\nParameter termsaccepted MUST be set to yes if the user accepted terms of service and other agreements.\n\nThe new password is subject to the same checks as in changepassword.\n\nSource: https://docs.pcloud.com/methods/auth/register.html\n\nArguments\n\nmail::String: user's email address\npassword::String: the password chosen by the user\n\nOptional Arguments\n\nlanguage::String: set to one of the supported languages. See supportedlanguages\nreferer::String: the userid of the refering user\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/invite.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"invite","category":"page"},{"location":"reference/#PCloud.API.invite","page":"API Reference","title":"PCloud.API.invite","text":"invite(client::PCloudClient; kwargs...)\n\nGet url of a registration page with a referrer code that credits free space to user account upon user registration.\n\nSource: https://docs.pcloud.com/methods/auth/invite.html\n\nOutput\n\nurl::String: address of the registration page\nspacelimitreached::Bool: is the maximum of free space is reached by the user or not.\n\nOutput Example\n\n{\n    url: \"https://my.pcloud.com/#page=register&invite=invite_code\",\n    spacelimitreached: false,\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/userinvites.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"userinvites","category":"page"},{"location":"reference/#PCloud.API.userinvites","page":"API Reference","title":"PCloud.API.userinvites","text":"userinvites(client::PCloudClient; kwargs...)\n\nGet a list of the invitations of the current user.\n\nSource: https://docs.pcloud.com/methods/auth/userinvites.html\n\nOutput\n\nReturns a list invites containing information about the accepted invitations. It has the format:\n\nemail::String: the email of the inivted user. For security, part of the mail is hidden.\nis_pending::Bool: is the inivitation pending.\n\nNew user is added to this list when the invited user is registered and is not pending when the user validates his mail.\n\nOutput Example\n\n{\n    \"invites\": [\n    {\n        \"email\": \"x**@xyz.com\",\n        \"is_pending\": 1\n    },\n\n    ...\n\n    ] , \n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/logout.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"logout","category":"page"},{"location":"reference/#PCloud.API.logout","page":"API Reference","title":"PCloud.API.logout","text":"logout(client::PCloudClient; kwargs...)\n\nGets a token and invalidates it.\n\nSource: https://docs.pcloud.com/methods/auth/logout.html\n\nOutput\n\nReturns bool auth_deleted if the token invalidation was successful\n\n(token was correct and it was actually invalidated).\n\nOutput Example\n\n{\n    result: 0,\n    auth_deleted: true\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/listtokens.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"listtokens","category":"page"},{"location":"reference/#PCloud.API.listtokens","page":"API Reference","title":"PCloud.API.listtokens","text":"listtokens(client::PCloudClient; kwargs...)\n\nGet a list with the currently active tokens associated with the current user.\n\nSource: https://docs.pcloud.com/methods/auth/listtokens.html\n\nOutput\n\nReturns a list tokens of objectes full with token information. Every object has the fields:\n\ntokenid::Int: identification number of the token.\ndevice::String: information about the device to which the token was given.\ncreated::datetime: when the token was created.\nexpires_inactive::datetime: when the token expires, if the owner does not use it.\nexpires::datetime: when the token expires. This is the latest moment, when the token will be active.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"tokens\": [\n        {\n            \"tokenid\": 163409641,\n            \"device\": \"User agent info\",\n            \"created\": \"Mon, 09 Jun 2014 10:24:51 +0000\"\n            \"expires_inactive\": \"Thu, 10 Jul 2014 10:24:51 +0000\",\n            \"expires\": \"Tue, 09 Jun 2015 10:24:51 +0000\",\n        },\n\n        ...\n\n    ]    \n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/deletetoken.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"deletetoken","category":"page"},{"location":"reference/#PCloud.API.deletetoken","page":"API Reference","title":"PCloud.API.deletetoken","text":"deletetoken(client::PCloudClient; kwargs...)\n\nDelete (invalidate) an authentication token.\n\nThe token is identified by tokenid. This is recieved from listtokens\n\nSource: https://docs.pcloud.com/methods/auth/deletetoken.html\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/sendchangemail.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendchangemail","category":"page"},{"location":"reference/#PCloud.API.sendchangemail","page":"API Reference","title":"PCloud.API.sendchangemail","text":"sendchangemail(client::PCloudClient; kwargs...)\n\nSends email to the logged in user with link.\n\nIf you send newmail and code, sends email to newmail with link to last step.\n\nSource: https://docs.pcloud.com/methods/auth/sendchangemail.html\n\nOptional Arguments\n\nnewmail::String: newemail of the user\ncode::String: code sent in email\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/changemail.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"changemail","category":"page"},{"location":"reference/#PCloud.API.changemail","page":"API Reference","title":"PCloud.API.changemail","text":"changemail(client::PCloudClient; kwargs...)\n\nChange current user's email. Takes newmail from code.\n\nSource: https://docs.pcloud.com/methods/auth/changemail.html\n\nArguments\n\npassword::String: current password of the user\ncode::String: code sent in email\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/senddeactivatemail.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"senddeactivatemail","category":"page"},{"location":"reference/#PCloud.API.senddeactivatemail","page":"API Reference","title":"PCloud.API.senddeactivatemail","text":"senddeactivatemail(client::PCloudClient; kwargs...)\n\nSends email to the logged in user with link.\n\nSource: https://docs.pcloud.com/methods/auth/senddeactivatemail.html\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/auth/deactivateuser.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"deactivateuser","category":"page"},{"location":"reference/#PCloud.API.deactivateuser","page":"API Reference","title":"PCloud.API.deactivateuser","text":"deactivateuser(client::PCloudClient; kwargs...)\n\nDeactivate current user.\n\nSource: https://docs.pcloud.com/methods/auth/deactivateuser.html\n\nArguments\n\npassword::String: current password of the user\ncode::String: code sent in email\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/#Streaming","page":"API Reference","title":"Streaming","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.getfilelink\nPCloud.getvideolink\nPCloud.getvideolinks\nPCloud.getaudiolink\nPCloud.gethlslink\nPCloud.gettextfile","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/streaming/getfilelink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getfilelink","category":"page"},{"location":"reference/#PCloud.API.getfilelink","page":"API Reference","title":"PCloud.API.getfilelink","text":"getfilelink(client::PCloudClient; kwargs...)\n\nGet a download link for file Takes fileid (or path) as parameter and provides links from which the file can be downloaded.\n\nIf the optional parameter forcedownload is set, the file will be served by the content server with content type application/octet-stream, which typically forces user agents to save the file.\n\nAlternatively you can provide parameter contenttype with the Content-Type you wish the content server to send. If these parameters are not set, the content type will depend on the extension of the file.\n\nParameter maxspeed may be used if you wish to limit the download speed (in bytes per second) for this download.\n\nFinally you can set skipfilename so the link generated will not include the name of the file.\n\nSource: https://docs.pcloud.com/methods/streaming/getfilelink.html\n\nArguments\n\nfileid::Int: ID of the renamed file\npath::String: Path to the renamed file\n\nUse fileid or path\n\nOptional Arguments\n\nforcedownload::Int: Download with Content-Type = application/octet-stream\ncontenttype::String: Set Content-Type\nmaxspeed::Int: limit the download speed\nskipfilename::Int: include the name of the file in the generated link\n\nOutput\n\nOn success it will return array hosts with servers that have the file. The first server is the one we consider best for current download.\n\nIn path there will be a request you should send to server.\n\nYou need to construct the URL yourself by concatenating http:// or https:// with one of the hosts (first one) and the path.\n\nOutput Example\n\n{\n    result: 0,\n    path: \"/hash/My%20picture.jpg\",\n    expires: \"Thu, 03 Oct 2013 01:06:49 +0000\",\n    hosts: [\n        \"c63.pcloud.com\",\n        \"c1.pcloud.com\"\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/streaming/getvideolink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getvideolink","category":"page"},{"location":"reference/#PCloud.API.getvideolink","page":"API Reference","title":"PCloud.API.getvideolink","text":"getvideolink(client::PCloudClient; kwargs...)\n\nGet a streaming link for video file Takes fileid (or path) of a video file and provides links (same way getfilelink does with hosts and path) from which the video can be streamed with lower bitrate (and/or resolution).\n\nThe transcoded video will be in a FLV container with x264 video and mp3 audio, by default the video bitrate will be adapted to the connection speed in real time.\n\nBy default the content servers will send appropriate content-type for FLV files, this can be overridden with either forcedownload or contenttype optional parameters.\n\nOptionally skipfilename works the same way as in getfilelink.\n\nTranscoding specific optional parameters are:\n\nabitrate::Int: audio bit rate in kilobits, from 16 to 320\nvbitrate::Int: video bitrate in kilobits, from 16 to 4000\nresolution::String: in pixels, from 64x64 to 1280x960, WIDTHxHEIGHT\nfixedbitrate::Bool: if set, turns off adaptive streaming and the stream will be with a constant bitrate.\n\nThe video bitrate is only the initial if adaptive straming is used.\n\nThe default parameters (that should generally be OK for most cases) are:no change to video resolution (if you know your device resolution it might be a good idea to set resolution)initial video bitrate of 1000kbit/sec with adapting to connection speed128kbit audio bitrate Generated links, not the method itself accept the HTTP GET parameter start, that if present will skip that much seconds of the video.\n\nSource: https://docs.pcloud.com/methods/streaming/getvideolink.html\n\nArguments\n\nfileid::Int: ID of the renamed file\npath::String: Path to the renamed file\n\nUse fileid or path\n\nOptional Arguments\n\nforcedownload::Int: Download with Content-Type = application/octet-stream\ncontenttype::String: Set Content-Type\nmaxspeed::Int: limit the download speed\nskipfilename::Int: include the name of the file in the generated link\nabitrate::Int: audio bit rate in kilobits, from 16 to 320\nvbitrate::Int: video bitrate in kilobits, from 16 to 4000\nresolution::String: in pixels, from 64x64 to 1280x960, WIDTHxHEIGHT\nfixedbitrate::Bool: if set, turns off adaptive streaming and the stream will be with a constant bitrate.\n\nOutput\n\nOn success it will return array hosts with servers that have the file. The first server is the one we consider best for current download.\n\nIn path there will be a request you should send to server. You need to construct the URL yourself by concatenating http:// or https:// with one of the hosts (first one) and the path.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"expires\": \"Thu, 03 Oct 2013 01:17:11 +0000\",\n    \"path\": \"/hash/My video.mp4\",\n    \"hosts\": [\n        \"c11.pcloud.com\",\n        \"c20.pcloud.com\"\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/streaming/getvideolinks.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getvideolinks","category":"page"},{"location":"reference/#PCloud.API.getvideolinks","page":"API Reference","title":"PCloud.API.getvideolinks","text":"getvideolinks(client::PCloudClient; kwargs...)\n\nReturns variants array of different quality/resolution versions of a video, identified by fileid (or path).\n\nEach variant of the vide will have path and hosts (as with getfilelink), width and height of the video, duration of the video in seconds (floating point number sent as string), fps - frames per second rate of the video, videobitrate and audiobitrate will specify the bitrate of the video and audio, encoded by respectively videocodec and audiocodec. For the original video variant isoriginal will be true.\n\nBy default the content servers will send appropriate content-type for video files, this can be overridden with either forcedownload or contenttype optional parameters.\n\nOptionally skipfilename works the same way as in getfilelink.\n\nSource: https://docs.pcloud.com/methods/streaming/getvideolinks.html\n\nArguments\n\nfileid::Int: ID of the renamed file\npath::String: Path to the renamed file\n\nUse fileid or path\n\nOptional Arguments\n\nforcedownload::Int: Download with Content-Type = application/octet-stream\ncontenttype::String: Set Content-Type\nmaxspeed::Int: limit the download speed\nskipfilename::Bool: include the name of the file in the generated link\n\nOutput\n\nExplained above.\n\nOutput Example\n\n{\n  \"result\": 0,\n  \"variants\": [\n    {\n      \"width\": 640,\n      \"path\": \"/dFZwfHQZRRZ7Z7Z2b6cC7ZQ5ZZmb0ZK1TMI6SDeOy6pdx78UAVyfUhjd6y/Octane%20Team%202013%20Winter%20Rally%20Training.mp4\",\n      \"fps\": \"25\",\n      \"isoriginal\": false,\n      \"height\": 400,\n      \"videocodec\": \"h264\",\n      \"expires\": \"Wed, 13 Nov 2013 00:28:09 +0000\",\n      \"videobitrate\": 501,\n      \"audiobitrate\": 64,\n      \"audiocodec\": \"mp3\",\n      \"duration\": \"245.4\",\n      \"hosts\": [\n        \"c58.pcloud.com\",\n        \"c62.pcloud.com\"\n      ]\n    },\n    {\n      \"width\": 1280,\n      \"path\": \"/dFZysHQZRRZ7Z7Z2b6cC7ZQ5ZZmb0Z8VoWFa3rb18W6dVJgc1O7hQdWCqV/Octane%20Team%202013%20Winter%20Rally%20Training.mp4\",\n      \"fps\": \"25\",\n      \"isoriginal\": false,\n      \"height\": 720,\n      \"videocodec\": \"h264\",\n      \"expires\": \"Wed, 13 Nov 2013 00:28:09 +0000\",\n      \"videobitrate\": 1505,\n      \"audiobitrate\": 128,\n      \"audiocodec\": \"mp3\",\n      \"duration\": \"245.4\",\n      \"hosts\": [\n        \"c3.pcloud.com\",\n        \"c17.pcloud.com\"\n      ]\n    },\n    {\n      \"rotate\": 0,\n      \"path\": \"/dFZPzZRRZ7Z7Z2b6cC7ZQ5ZZmb0ZoogoFjJUdb01AMSvA1aYdHQmF9Ck/Octane%20Team%202013%20Winter%20Rally%20Training.mp4\",\n      \"fps\": \"25.00\",\n      \"isoriginal\": true,\n      \"audiosamplerate\": 48000,\n      \"videocodec\": \"h264\",\n      \"expires\": \"Wed, 13 Nov 2013 00:28:09 +0000\",\n      \"videobitrate\": 5737,\n      \"audiocodec\": \"aac\",\n      \"audiobitrate\": 189,\n      \"width\": 1280,\n      \"duration\": \"245.33\",\n      \"height\": 720,\n      \"hosts\": [\n        \"c3.pcloud.com\",\n        \"c65.pcloud.com\"\n      ]\n    }\n  ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/streaming/getaudiolink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getaudiolink","category":"page"},{"location":"reference/#PCloud.API.getaudiolink","page":"API Reference","title":"PCloud.API.getaudiolink","text":"getaudiolink(client::PCloudClient; kwargs...)\n\nGet a streaming link for audio file Takes fileid (or path) of an audio (or video) file and provides links from which audio can be streamed in mp3 format. (Same way getfilelink does with hosts and path)\n\nOptional parameters are abitrate, forcedownload and contenttype.\n\nThe default bitrate is 192kbit.\n\nIt can also be used to extract the audio track from a video.\n\nThe link itself supports the start GET parameter. This method can be used to play FLAC and other new formats on devices that only support mp3 playback.\n\nSource: https://docs.pcloud.com/methods/streaming/getaudiolink.html\n\nArguments\n\nfileid::Int: ID of the renamed file\npath::String: Path to the renamed file\n\nUse fileid or path\n\nOptional Arguments\n\nforcedownload::Int: Download with Content-Type = application/octet-stream\ncontenttype::String: Set Content-Type\nabitrate::Int: audio bit rate in kilobits, from 16 to 320\n\nOutput\n\nOn success it will return array hosts with servers that have the file. The first server is the one we consider best for current download.\n\nIn path there will be a request you should send to server. You need to construct the URL yourself by concatenating http:// or https:// with one of the hosts (first one) and the path.\n\nOutput Example\n\n{\n    result: 0,\n    expires: \"Thu, 03 Oct 2013 01:23:12 +0000\",\n    path: \"/hash/My Audio.mp3\",\n    hosts: [\n        \"c53.pcloud.com\",\n        \"c58.pcloud.com\"\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/streaming/gethlslink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"gethlslink","category":"page"},{"location":"reference/#PCloud.API.gethlslink","page":"API Reference","title":"PCloud.API.gethlslink","text":"gethlslink(client::PCloudClient; kwargs...)\n\nGet a m3u8 playlist for live streaming for video file\n\nTakes fileid (or path) of a video file and provides links (in the same way getfilelink does with hosts and path) from which a m3u8 playlist for HTTP Live Streaming can be downloaded.\n\nOptional parameters are abitrate, vbitrate, resolution and skipfilename.\n\nThese have the same meaning as in getvideolink.\n\nThe defaults are the same as for getvideolink.\n\nSource: https://docs.pcloud.com/methods/streaming/gethlslink.html\n\nArguments\n\nfileid::Int: ID of the renamed file\npath::String: Path to the renamed file\n\nUse fileid or path\n\nOptional Arguments\n\nabitrate::Int: audio bit rate in kilobits, from 16 to 320\nvbitrate::Int: video bitrate in kilobits, from 16 to 4000\nresolution::String: in pixels, from 64x64 to 1280x960, WIDTHxHEIGHT\nskipfilename::Int: include the name of the file in the generated link\n\nOutput\n\nOn success it will return array hosts with servers that have the file. The first server is the one we consider best for current download.\n\nIn path there will be a request you should send to server. You need to construct the URL yourself by concatenating http:// or https:// with one of the hosts (first one) and the path.\n\nOutput Example\n\n{\n    expires: \"Thu, 03 Oct 2013 01:27:42 +0000\",\n    result: 0,\n    path: \"/hash/My video.m3u8\",\n    hosts: [\n        \"c11.pcloud.com\",\n        \"c20.pcloud.com\"\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/streaming/gettextfile.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"gettextfile","category":"page"},{"location":"reference/#PCloud.API.gettextfile","page":"API Reference","title":"PCloud.API.gettextfile","text":"gettextfile(client::PCloudClient; kwargs...)\n\nDownload a file in different character encoding Takes fileid (or path) as parameter and returns contents of the file in different character encoding. The file is streamed as response to this method by the content server.\n\nOptional parameter fromencoding specify the original character encoding of the file. If ommited it will be guessed based on the contents of the file.\n\nOptional parameter toencoding specify the requested character encoding for the output. The default is utf-8.\n\nIf the optional parameter forcedownload is set, the file will be served by the server with content type application/octet-stream, which typically forces user agents to save the file.\n\nAlternatively you can provide parameter contenttype with the Content-Type you wish the server to send. If these parameters are not set, the content type will depend on the extension of the file.\n\nSource: https://docs.pcloud.com/methods/streaming/gettextfile.html\n\nArguments\n\nfileid::Int: ID of the renamed file\npath::String: Path to the renamed file\n\nUse fileid or path\n\nOptional Arguments\n\nfromencoding::String: the original character encoding of the file (default: guess)\ntoencoding::String: requested character encoding of the output (default: utf-8)\nforcedownload::Int: Download with Content-Type = application/octet-stream\ncontenttype::String: Set Content-Type\n\nOutput\n\nOn success this method outputs the data by the API server. No links to content servers are provided. Unless you provide invalid encodings in fromecoding or toencoding you can safely assume that this method will not fail.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Archiving","page":"API Reference","title":"Archiving","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.getzip\nPCloud.getziplink\nPCloud.savezip\nPCloud.extractarchive\nPCloud.extractarchiveprogress\nPCloud.savezipprogress","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/archiving/getzip.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getzip","category":"page"},{"location":"reference/#PCloud.API.getzip","page":"API Reference","title":"PCloud.API.getzip","text":"getzip(client::PCloudClient; kwargs...)\n\nReceive a zip file from the user's filesystem.\n\nExpects as parameter a defined tree.\n\nSource: https://docs.pcloud.com/methods/archiving/getzip.html\n\nOptional Arguments\n\nforcedownload::Int: If it is set, the content-type will be 'application/octet-stream', if not - 'application/zip'.\nfilename::String: If it is provided, this is sent back as 'Content-Disposition' header, forcing the browser to adopt this filename when downloading the file. Filename is passed unaltered, so it MUST include the .zip extension.\ntimeoffset::String: desired time offset\n\nOutput\n\nWhen successful it returns a zip archive over the current API connection with all the files and directories in the requested tree.\n\nIf the size of the resulting file is going to be over 4Gb or if it contains more than 65535 entries, the zip64 format is used, otherwise the file is plain zip. This is the fastest way to generate a zip file as the API server will construct the archive on-the-fly for you. Therefore the download will start instantly even with multi-gigabyte files.\n\nSince zip files do not support timezone information for file modification times, by default all datetime values in the resulting zip file will be in UTC. Alternatively timeoffset parameter may be provided with the desired time offset in the usual +xxxx or -xxxx format. Also +/-xx:xx and some named timezones (EET, EEST, PST, CST and like) are supported.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/archiving/getziplink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getziplink","category":"page"},{"location":"reference/#PCloud.API.getziplink","page":"API Reference","title":"PCloud.API.getziplink","text":"getziplink(client::PCloudClient; kwargs...)\n\nReceive a zip file link for files in the user's filesystem.\n\nRecognizes the same parameters as getzip.\n\nExpects as parameter a defined tree.\n\nUnlike getzip, returns a download link(s) the same way getfilelink does - returns path, hosts and expire.\n\n*Note : * This call is less efficient than getzip as the zip archive is created on our servers and only then you get a download link. So as fast as our servers are, it may take time to create a large archive.\n\nThe parameter maxspeed may be used if you wish to limit the download speed (in bytes per second) for this link.\n\nSource: https://docs.pcloud.com/methods/archiving/getziplink.html\n\nOptional Arguments\n\nmaxspeed::Int: limit the download speed (in bytes per second) for this link.\nforcedownload::Int: If it is set, the content-type will be 'application/octet-stream', if not - 'application/zip'.\nfilename::String: If it is provided, this is sent back as 'Content-Disposition' header, forcing the browser to adopt this filename when downloading the file. Filename is passed unaltered, so it MUST include the .zip extension.\ntimeoffset::String: desired time offset\n\nOutput\n\nOn success it will return array hosts with servers that have the file.\n\nThe first server is the one we consider best for current download.\n\nIn path there will be a request you should send to server.\n\nYou need to construct the URL yourself by concatenating http:// or https:// with one of the hosts (first one) and the path.\n\nOutput Example\n\n{\n    result: 0,\n    path: \"/dFZ73Y0ZtdPJZ3lZZhipqC7ZNVZZmb0ZHQp8Ed85S8HL874JvyYgMY8C1tbk/My%20picture.jpg\",\n    expires: \"Thu, 03 Oct 2013 01:06:49 +0000\",\n    hosts: [\n        \"c63.pcloud.com\",\n        \"c1.pcloud.com\"\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/archiving/savezip.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"savezip","category":"page"},{"location":"reference/#PCloud.API.savezip","page":"API Reference","title":"PCloud.API.savezip","text":"savezip(client::PCloudClient; kwargs...)\n\nCreate a zip file in the user's filesystem.\n\nRecognizes the same parameters as getzip without forcedownload and filename.\n\nExpects as parameter a defined tree.\n\nAdditionally expects the usual topath or tofolderid+toname.\n\nSource: https://docs.pcloud.com/methods/archiving/savezip.html\n\nOptional Arguments\n\ntimeoffset::String: desired time offset\ntopath::String: path where to save the zip archive\ntofolderid::Int: foldre id of the folder, where to save the zip archive\ntoname::String: filename of the desired zip archive\nprogresshash::String: key to retrieve the progress for the zipping process If you want to see the progres, please pass progresshash, different for every method call. To get the progress use savezipprogress\n\nUse topath or tofolderid and toname\n\nOutput\n\nIf successful creates the zip archive and returns its metadata.\n\nOutput Example\n\n{\n    result: 0,\n    metadata: {\n        parentfolderid: 0,\n        category: 5,\n        hash: 3415575675870461400,\n        ismine: true,\n        created: \"Thu, 03 Oct 2013 09:47:16 +0000\",\n        modified: \"Thu, 03 Oct 2013 09:47:16 +0000\",\n        contenttype: \"application/zip\",\n        path: \"/Simple archive.zip\",\n        name: \"Simple archive.zip\",\n        size: 17675984,\n        isfolder: false,\n        isshared: false,\n        fileid: 1792497,\n        icon: \"archive\",\n        thumb: false,\n        id: \"f1792497\"\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/archiving/extractarchive.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"extractarchive","category":"page"},{"location":"reference/#PCloud.API.extractarchive","page":"API Reference","title":"PCloud.API.extractarchive","text":"extractarchive(client::PCloudClient; kwargs...)\n\nExtracts archive file from the user's filesystem.\n\nExpects as paramters usual fileid or path of an archive file and tofolderid or topath for destination folder.\n\nIf the archive is password protected, password parameter should be provided, otherwise error number 7009 will be returned. Implementations should expect this error code and if encountered prompt user for password and retry the extraction process.\n\nThis method runs the extraction process for around 2 seconds. In case it manages to finish in these 2 seconds, finished will be set to true in the response. Otherwise finished will be false and progresshash will be provided. This value can be passed to extractarchiveprogress in order to continue the monitoring of the extraction process. In this case also information about current server is returned the same way as provided by currentserver. Monitoring extraction can only be done by sending requests to the same server as returned in the hostname.\n\nUnless nooutput is set this method also returns output array of lines (with no newlines in the end) that are the output of the extraction program. The number returned in lines can be used to instruct extractarchiveprogress not to return the same lines of output again.\n\nSource: https://docs.pcloud.com/methods/archiving/extractarchive.html\n\nOptional Arguments\n\nnooutput::Bool: if set extraction output is not returned\noverwrite::String: specifies what to do if file to extract already exists in the folder, can be one of 'rename' (default), 'overwrite' and 'skip'\npassword::String: password to use to extract a password protected archive\n\nOutput\n\nDescribed above.\n\nOutput Example\n\n{\n  \"progresshash\": \"KooPMKmcEBp\",\n  \"ip\": \"204.155.151.23\",\n  \"hostname\": \"api5.pcloud.com\",\n  \"ipv6\": \"::1\",\n  \"result\": 0,\n  \"lines\": 10,\n  \"ipbin\": \"204.155.151.45\",\n  \"finished\": false,\n  \"output\": [\n    \"Titov.zip: Zip\",\n    \"  Titov/_ART5055.jpg  (1681557 B)... OK.\",\n    \"  Titov/_ART5059.jpg  (1713601 B)... OK.\",\n    \"  Titov/_ART5063.jpg  (1811854 B)... OK.\",\n    \"  Titov/_ART5069.jpg  (1918700 B)... OK.\",\n    \"  Titov/_ART5071.jpg  (1701381 B)... OK.\",\n    \"  Titov/_ART5074.jpg  (1678731 B)... OK.\",\n    \"  Titov/_ART5076.jpg  (1658403 B)... OK.\",\n    \"  Titov/_ART5079.jpg  (1728540 B)... OK.\",\n    \"  Titov/_ART5094.jpg  (1745843 B)... OK.\"\n  ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/archiving/extractarchiveprogress.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"extractarchiveprogress","category":"page"},{"location":"reference/#PCloud.API.extractarchiveprogress","page":"API Reference","title":"PCloud.API.extractarchiveprogress","text":"extractarchiveprogress(client::PCloudClient; kwargs...)\n\nReturns output and completion status of an archive extraction process.\n\nExpects as paramters progresshash as returned by extractarchive and optionally lines.\n\nThe boolean value finished indicates if the process is finished or not. In output array lines of output of the extraction program are returned. The number in lines can be passed back to this method and will exclude already returned lines of output.\n\nSource: https://docs.pcloud.com/methods/archiving/extractarchiveprogress.html\n\nOptional Arguments\n\nlines::Int: number of lines of output to skip from the output array\n\nOutput\n\nDescribed above.\n\nOutput Example\n\n{\n  \"result\": 0,\n  \"lines\": 109,\n  \"finished\": true,\n  \"output\": [\n    \"Titov.zip: Zip\",\n    \"  Titov/_ART5055.jpg  (1681557 B)... OK.\",\n    \"  Titov/_ART5059.jpg  (1713601 B)... OK.\",\n    \"  Titov/_ART5063.jpg  (1811854 B)... OK.\",\n    \"  Titov/_ART5069.jpg  (1918700 B)... OK.\",\n    \"  Titov/_ART5071.jpg  (1701381 B)... OK.\",\n    \"  Titov/_ART5074.jpg  (1678731 B)... OK.\",\n    \"  Titov/_ART5076.jpg  (1658403 B)... OK.\",\n    \"  Titov/_ART5079.jpg  (1728540 B)... OK.\",\n    \"  Titov/_ART5094.jpg  (1745843 B)... OK.\",\n    \"  Titov/_ART5102.jpg  (1716455 B)... OK.\",\n    \"  Titov/_ART5103.jpg  (1616031 B)... OK.\",\n    \"  Titov/_ART5626.jpg  (2174388 B)... OK.\",\n    \"  Titov/_ART5628.jpg  (2061103 B)... OK.\",\n    \"  Titov/_ART5864.jpg  (1490067 B)... OK.\",\n    \"  Titov/_ART5866.jpg  (1503272 B)... OK.\",\n    \"  Titov/_ART5868.jpg  (1748141 B)... OK.\",\n    \"  Titov/_ART5869.jpg  (1839470 B)... OK.\",\n    \"  Titov/_ART5878.jpg  (1264889 B)... OK.\",\n    \"  Titov/_ART6108.jpg  (2190771 B)... OK.\",\n    \"  Titov/_ART6109.jpg  (2019572 B)... OK.\",\n    \"  Titov/_ART6111.jpg  (1939203 B)... OK.\",\n    \"  Titov/_ART6118.jpg  (2279575 B)... OK.\",\n    \"  Titov/_ART6123.jpg  (2204205 B)... OK.\",\n    \"  Titov/_ART6366.jpg  (2135242 B)... OK.\",\n    \"  Titov/_ART6368.jpg  (2287593 B)... OK.\",\n    \"  Titov/_ART6375.jpg  (2191877 B)... OK.\",\n    \"  Titov/_MG_2238.jpg  (1466355 B)... OK.\",\n    \"  Titov/_MG_2244.jpg  (1295216 B)... OK.\",\n    \"  Titov/_MG_2246.jpg  (1460799 B)... OK.\",\n    \"  Titov/_MG_2248.jpg  (1529065 B)... OK.\",\n    \"  Titov/_MG_2253.jpg  (1227511 B)... OK.\",\n    \"  Titov/_MG_2254.jpg  (1480305 B)... OK.\",\n    \"  Titov/_MG_3035.jpg  (1789125 B)... OK.\",\n    \"  Titov/_MG_3164.jpg  (1952735 B)... OK.\",\n    \"  Titov/_MG_3170.jpg  (1063317 B)... OK.\",\n    \"  Titov/_MG_3172.jpg  (2357181 B)... OK.\",\n    \"  Titov/_MG_3173.jpg  (2142821 B)... OK.\",\n    \"  Titov/_MG_3885.jpg  (1311330 B)... OK.\",\n    \"  Titov/_MG_3890.jpg  (1925228 B)... OK.\",\n    \"  Titov/_MG_3892.jpg  (1797677 B)... OK.\",\n    \"  Titov/_MG_3899.jpg  (2225951 B)... OK.\",\n    \"  Titov/_MG_4108.jpg  (1341266 B)... OK.\",\n    \"  Titov/_MG_4409.jpg  (1826640 B)... OK.\",\n    \"  Titov/_MG_4416.jpg  (1312750 B)... OK.\",\n    \"  Titov/_MG_5430.jpg  (1888501 B)... OK.\",\n    \"  Titov/_MG_5458.jpg  (2223461 B)... OK.\",\n    \"  Titov/_MG_5640.jpg  (1850502 B)... OK.\",\n    \"  Titov/_MG_5645.jpg  (1315393 B)... OK.\",\n    \"  Titov/_MG_5646.jpg  (1453218 B)... OK.\",\n    \"  Titov/_MG_5653.jpg  (1448595 B)... OK.\",\n    \"  Titov/_MG_5654.jpg  (1461125 B)... OK.\",\n    \"  Titov/_MG_6130.jpg  (2272260 B)... OK.\",\n    \"  Titov/_MG_6137.jpg  (1042867 B)... OK.\",\n    \"  Titov/_MG_6139.jpg  (1001587 B)... OK.\",\n    \"  Titov/_MG_6147.jpg  (1968840 B)... OK.\",\n    \"  Titov/_MG_6154.jpg  (2471284 B)... OK.\",\n    \"  Titov/_MG_6197.jpg  (1935389 B)... OK.\",\n    \"  Titov/_MG_6200.jpg  (1952539 B)... OK.\",\n    \"  Titov/_MG_6204.jpg  (1547425 B)... OK.\",\n    \"  Titov/_MG_6213.jpg  (1863369 B)... OK.\",\n    \"  Titov/_MG_6227.jpg  (1751445 B)... OK.\",\n    \"  Titov/_MG_6238.jpg  (1530810 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0007.jpg  (3422222 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0010.jpg  (3695719 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0094.jpg  (3521664 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0095.jpg  (2429226 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0096.jpg  (2488633 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0097.jpg  (2655423 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0098.jpg  (2340300 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0099.jpg  (2568207 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0101.jpg  (3147384 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0231.jpg  (1926706 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0238.jpg  (1559040 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0246.jpg  (1869346 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0250.jpg  (1458431 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_FRI_0251.jpg  (1031734 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0038.jpg  (3613789 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0039.jpg  (3723149 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0040.jpg  (3262341 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0042.jpg  (2788097 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0200.jpg  (3643640 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0201.jpg  (2680875 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0202.jpg  (2544499 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0203.jpg  (2840461 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0204.jpg  (2700571 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0205.jpg  (2631643 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0206.jpg  (2409407 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0345.jpg  (2655096 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0346.jpg  (3268206 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0347.jpg  (2035836 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0348.jpg  (2284103 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SAT_0349.jpg  (2071153 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SUN_0041.jpg  (2340276 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SUN_0042.jpg  (2950695 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SUN_0043.jpg  (2526685 B)... OK.\",\n    \"  Titov/Rally_Sliven_2013_SUN_0044.jpg  (2051779 B)... OK.\",\n    \"  Titov/TJP_6400.jpg  (1127206 B)... OK.\",\n    \"  Titov/TJP_6425.jpg  (1239689 B)... OK.\",\n    \"  Titov/TJP_6797.jpg  (1858359 B)... OK.\",\n    \"  Titov/TJP_6799.jpg  (3042033 B)... OK.\",\n    \"  Titov/TJP_7114.jpg  (1375604 B)... OK.\",\n    \"  Titov/TJP_7120.jpg  (1332261 B)... OK.\",\n    \"  Titov/TJP_7126.jpg  (2182860 B)... OK.\",\n    \"  Titov/TJP_7127.jpg  (1519095 B)... OK.\",\n    \"  Titov/TJP_7541.jpg  (2216513 B)... OK.\",\n    \"  Titov/TJP_7867.jpg  (1076556 B)... OK.\",\n    \"  Titov/TJP_7873.jpg  (1079839 B)... OK.\",\n    \"Successfully extracted to current directory.\"\n  ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/archiving/savezipprogress.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"savezipprogress","category":"page"},{"location":"reference/#PCloud.API.savezipprogress","page":"API Reference","title":"PCloud.API.savezipprogress","text":"savezipprogress(client::PCloudClient; kwargs...)\n\nGet the progress in process of zipping file in the user's filesystem.\n\nThe process is started with the method savezip. On every zipped file the progress is updated. The process could be marked as ready, once when files equals totalfiles in the result.\n\nExpects as parameter progresshash - key passed to savezip with the intention to observe the progress.\n\nPlease, use different progresshash for every call of savezip.\n\nSource: https://docs.pcloud.com/methods/archiving/savezipprogress.html\n\nOptional Arguments\n\nprogresshash::String: the key to boserve the zipping process.\n\nOutput\n\nIf there exists such zipping process, then the method returns:\n\nfiles::Int: count of the already zipped files.\ntotalfiles::Int: total count of files to be zipped.\nbytes::Int: size of the already zipped files.\ntotalfiles::Int: total size of the files to be zipped.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"files\": 34,\n    \"totalfiles\": 129,\n    \"bytes\": 263473,\n    \"totalbytes\": 54750979\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/#Sharing","page":"API Reference","title":"Sharing","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.sharefolder\nPCloud.listshares\nPCloud.sharerequestinfo\nPCloud.cancelsharerequest\nPCloud.acceptshare\nPCloud.declineshare\nPCloud.removeshare\nPCloud.changeshare","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/sharing/sharefolder.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sharefolder","category":"page"},{"location":"reference/#PCloud.API.sharefolder","page":"API Reference","title":"PCloud.API.sharefolder","text":"sharefolder(client::PCloudClient; kwargs...)\n\nShares a folder with another user.\n\nShare may be subject to confirmation from the other user. The folder to be shared is identified by folderid or path.\n\nOptional share name can be provided, if it is not, the folder name is used as sharename. Implementations are advised to give opportunity to the sharing user to select the share name, which should be pre-filled with the folder name.\n\nThe required parameter mail holds the email address of the user with whom you are sharing the folder.\n\nThe required parameter permissions sets the permissions for the folder.\n\nZero for read-only or any combination (sum/or) of\n\n1: Create permission\n2: Modify permission\n4: Delete permission\n\nOptional parameter message allows adding a message to pass to the receiving user.\n\nFolder sharing is a complicated operation and the following errors are likely to be returned:- 2014: the user's address is not verified. Implementations are advised upon user confirmation to call sendverificationemail and to ask the user to check his/her email.\n\n2015: root folder cannot be shared, this check SHOULD also be performed on the client.\n2016::ismine: one can only share folders with set to true, implementations SHOULD check this locally too.\n2017: user does not accept requests from you or from anybody, implementations can not know if this is going to happen, but are expected to act appropriately on this error.\n\nSource: https://docs.pcloud.com/methods/sharing/sharefolder.html\n\nArguments\n\nfolderid::Int: folder id of the shared folder\npath::String: path to the shared folder\nmail::String: mail of the user with whom you are sharing the folder\npermissions::Int: bitwise combination of permission flags\n\nUse path or folderid\n\nOptional Arguments\n\nname::String: name of the share. Default - the folder name.\nmessage::String: message to pass to the receiving user.\n\nOutput Example\n\n{\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/sharing/listshares.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"listshares","category":"page"},{"location":"reference/#PCloud.API.listshares","page":"API Reference","title":"PCloud.API.listshares","text":"listshares(client::PCloudClient; kwargs...)\n\nList current shares and share requests.\n\nSource: https://docs.pcloud.com/methods/sharing/listshares.html\n\nOptional Arguments\n\nnorequests::Int: If set, share requests will not be returned\nnoshares::Int: If set, established shares will not be returned\nnoincoming::Int: If set, hide incoming sub-objects in the result\nnooutgoing::Int: If set, hide outgoing sub-objects in the result\n\nOutput\n\nReturns two objects shares and requests both with sub-objects incoming and outgoing.\n\nOutput Example\n\n{\n    result: 0,\n    shares: {\n        incoming: [ ],\n        outgoing: [ ]\n    },\n    requests: {\n        incoming: [ ],\n        outgoing: [\n            {\n                tomail: \"pcloud@pcloud.com\",\n                cancreate: false,\n                folderid: 21385,\n                sharerequestid: ID,\n                canread: true,\n                expires: \"Thu, 24 Oct 2013 10:41:29 +0000\",\n                canmodify: false,\n                message: \"The message\",\n                candelete: false,\n                sharename: \"My Share\",\n                created: \"Thu, 03 Oct 2013 10:41:29 +0000\"\n            }\n        ]\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/sharing/sharerequestinfo.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sharerequestinfo","category":"page"},{"location":"reference/#PCloud.API.sharerequestinfo","page":"API Reference","title":"PCloud.API.sharerequestinfo","text":"sharerequestinfo(client::PCloudClient; kwargs...)\n\nGet information about a share request from the code that was sent to the user's email.\n\nSource: https://docs.pcloud.com/methods/sharing/sharerequestinfo.html\n\nArguments\n\ncode::String: The code that was sent to the user's email\n\nOutput\n\nReturn information about a share.\n\nOutput Example\n\n{\n    result: 0,\n    share: {\n        tomail: \"pcloud@pcloud.com\",\n        cancreate: false,\n        folderid: 21385,\n        sharerequestid: ID,\n        canread: true,\n        expires: \"Thu, 24 Oct 2013 10:41:29 +0000\",\n        canmodify: false,\n        message: \"The message\",\n        candelete: false,\n        sharename: \"My Share\",\n        created: \"Thu, 03 Oct 2013 10:41:29 +0000\"\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/sharing/cancelsharerequest.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"cancelsharerequest","category":"page"},{"location":"reference/#PCloud.API.cancelsharerequest","page":"API Reference","title":"PCloud.API.cancelsharerequest","text":"cancelsharerequest(client::PCloudClient; kwargs...)\n\nCancels a share request sent by the current user.\n\nSource: https://docs.pcloud.com/methods/sharing/cancelsharerequest.html\n\nArguments\n\nsharerequestid::Int: Identificator of the request\n\nOutput Example\n\n{\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/sharing/acceptshare.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"acceptshare","category":"page"},{"location":"reference/#PCloud.API.acceptshare","page":"API Reference","title":"PCloud.API.acceptshare","text":"acceptshare(client::PCloudClient; kwargs...)\n\nAccept a share request.\n\nThe request can be either identified by sharerequestid as reported by diff or by a code that comes from email.\n\nAn optional name can be specified for the folder name, otherwise the share name will be used.\n\nImplementations are advised to ask for the local name with name pre-filled.\n\nOptionally the target folder to mount the share may be identified by folderid or path.\n\nIf the folder is not specified, the user's default folder for accepting shares will be used, if no such folder exists one with suitable name will be created in the user's root directory.\n\nIf the optional parameter always is set, the accepting user from now on will auto-accept requests from the sharing user to the default share folder.\n\nSource: https://docs.pcloud.com/methods/sharing/acceptshare.html\n\nArguments\n\nsharerequestid::Int: The id of the share request\ncode::String: The code that was sent to the user's email\n\nUse sharerequestid or code.\n\nOptional Arguments\n\nname::String: Specify the folder name. Otherwise, use the share name.\nfolderid::Int: The id of the folder where to mount the share\npath::String: The filepath to the point where to mount the share\nalways::Int: If set, the accepting user from now on will auto-accept requests from the sharing user to the default share folder.\n\nUse folderid or path.\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/sharing/declineshare.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"declineshare","category":"page"},{"location":"reference/#PCloud.API.declineshare","page":"API Reference","title":"PCloud.API.declineshare","text":"declineshare(client::PCloudClient; kwargs...)\n\nDecline a share request.\n\nThe request can be either identified by sharerequestid as reported by diff or by a code that comes from email.\n\nIf the optional parameter block is set, all future share requests from the offering user will be automatically declined.\n\nSource: https://docs.pcloud.com/methods/sharing/declineshare.html\n\nArguments\n\nsharerequestid::Int: The id of the share request\ncode::String: The code that was sent to the user's email\n\nUse sharerequestid or code.\n\nOptional Arguments\n\nblock::Int: If set, all future share requests from the offering user will be automatically declined.\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/sharing/removeshare.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"removeshare","category":"page"},{"location":"reference/#PCloud.API.removeshare","page":"API Reference","title":"PCloud.API.removeshare","text":"removeshare(client::PCloudClient; kwargs...)\n\nRemove an active share.\n\nThis can be both incoming or outgoing share.\n\nSource: https://docs.pcloud.com/methods/sharing/removeshare.html\n\nArguments\n\nshareid::Int: The id of the share request, returned by listshares\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/sharing/changeshare.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"changeshare","category":"page"},{"location":"reference/#PCloud.API.changeshare","page":"API Reference","title":"PCloud.API.changeshare","text":"changeshare(client::PCloudClient; kwargs...)\n\nChange permissions of a share.\n\nThe permissions are the same as in sharefolder\n\nOnly the owner of the share/folder may use this method.\n\nThat is - it is only allowed for\n\noutgoing shares.\n\nSource: https://docs.pcloud.com/methods/sharing/changeshare.html\n\nArguments\n\nshareid::Int: The id of the share request, returned by listshares\npermissions::String: The new permissions\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/#Public-Links","page":"API Reference","title":"Public Links","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.getfilepublink\nPCloud.getfolderpublink\nPCloud.gettreepublink\nPCloud.showpublink\nPCloud.getpublinkdownload\nPCloud.copypubfile\nPCloud.listpublinks\nPCloud.listplshort\nPCloud.deletepublink\nPCloud.changepublink\nPCloud.getpubthumb\nPCloud.getpubthumblink\nPCloud.getpubthumbslinks\nPCloud.savepubthumb\nPCloud.getpubzip\nPCloud.getpubziplink\nPCloud.savepubzip\nPCloud.getpubvideolinks\nPCloud.getpubaudiolink\nPCloud.getpubtextfile\nPCloud.getcollectionpublink","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/getfilepublink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getfilepublink","category":"page"},{"location":"reference/#PCloud.API.getfilepublink","page":"API Reference","title":"PCloud.API.getfilepublink","text":"getfilepublink(client::PCloudClient; kwargs...)\n\nCreates and return a public link to a file.\n\nThe file is identified by fileid or path.\n\nSource: https://docs.pcloud.com/methods/public_links/getfilepublink.html\n\nArguments\n\nfileid::Int: file id of the file for public link\npath::String: path to the file for public link\n\nUse path or fileid\n\nOptional Arguments\n\nexpire::datetime: Datetime when the link will stop working\nmaxdownloads::Int: Maximum number of downloads for this file\nmaxtraffic::Int: Maximum traffic that this link will consume (in bytes, started downloads will not be cut to fit in this limit)\nshortlink::Int: If set, a short link will also be generated\n\nOutput\n\nOn success returns\n\nlinkid::Int: ID that can be used to delete/modify this public link\ncode::String: link's code that can be used to retrieve the public link contents (with showpublink/getpublinkdownload)\n\nIf shortlink is set when calling, additonal\n\nlinkid::Int: ID that can be used to delete/modify this public link\nshortcode::String: short code that can also be passed to showpublink/getpublinkdownload\nshortlink::String: a full https link to pc.cd domain with shortcode appended\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"linkid\": Link ID,\n    \"link\": \"https://my.pcloud.com/#page=publink&code=LinkCode\",\n    \"code\": \"LinkCode\"\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/getfolderpublink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getfolderpublink","category":"page"},{"location":"reference/#PCloud.API.getfolderpublink","page":"API Reference","title":"PCloud.API.getfolderpublink","text":"getfolderpublink(client::PCloudClient; kwargs...)\n\nCreates and returns a public link to a folder.\n\nThe folder is identified by folderid or path.\n\nSame optional parameters as getfilepublink.\n\nmaxdownloads in this case limits total number of downloads from this folder (even for the same file).\n\nSource: https://docs.pcloud.com/methods/public_links/getfolderpublink.html\n\nArguments\n\nfolderid::Int: folder id of the folder for public link\npath::String: path to the folder for public link\n\nUse path or folderid\n\nOptional Arguments\n\nexpire::datetime: Datetime when the link will stop working\nmaxdownloads::Int: Maximum number of downloads from this folder (even for the same file).\nmaxtraffic::Int: Maximum traffic that this link will consume (in bytes, started downloads will not be cut to fit in this limit)\nshortlink::Int: If set, a short link will also be generated\n\nOutput\n\nOn success returns\n\nlinkid::Int: ID that can be used to delete/modify this public link\ncode::String: link's code that can be used to retrieve the public link contents (with showpublink/getpublinkdownload)\n\nIf shortlink is set when calling, additonal- linkid::Int: ID that can be used to delete/modify this public link\n\nshortcode::String: short code that can also be passed to showpublink/getpublinkdownload\nshortlink::String: a full https link to pc.cd domain with shortcode appended\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"linkid\": Link ID,\n    \"link\": \"https://my.pcloud.com/#page=publink&code=LinkCode\",\n    \"code\": \"LinkCode\"\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/gettreepublink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"gettreepublink","category":"page"},{"location":"reference/#PCloud.API.gettreepublink","page":"API Reference","title":"PCloud.API.gettreepublink","text":"gettreepublink(client::PCloudClient; kwargs...)\n\nCreates and returns a public link to a virtual folder that is defined by requested tree.\n\nTree is identified by the following parameters:\n\nfileids: comma-separated fileids\nfolderids: comma-separated folderids\nfolderid:: just one folderid - the contents of the folder will be dumped into the virtual folder instead of the folder itself\n\nAlso requires parameter name that will be the name of the virtual folder.\n\nSame optional parameters as getfilepublink.\n\nThe created link will have similar properties to ones returned by getfolderpublink with one notable exception:\n\nNote: Tree public links are snapshots of the requested files and folders at the time of creation and will not follow updates that will happen in the folders later.\n\nSource: https://docs.pcloud.com/methods/public_links/gettreepublink.html\n\nArguments\n\nfolderid::Int: folder id of the folder for public link\npath::String: path to the folder for public link\n\nUse path or folderid\n\nOptional Arguments\n\nexpire::datetime: Datetime when the link will stop working\nmaxdownloads::Int: Maximum number of downloads from this folder (even for the same file).\nmaxtraffic::Int: Maximum traffic that this link will consume (in bytes, started downloads will not be cut to fit in this limit)\nshortlink::Int: If set, a short link will also be generated\n\nOutput\n\nOn success returns\n\nlinkid::Int: ID that can be used to delete/modify this public link\ncode::String: link's code that can be used to retrieve the public link contents (with showpublink/getpublinkdownload)\n\nIf shortlink is set when calling, additonal- linkid::Int: ID that can be used to delete/modify this public link\n\nshortcode::String: short code that can also be passed to showpublink/getpublinkdownload\nshortlink::String: a full https link to pc.cd domain with shortcode appended\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"linkid\": Link ID,\n    \"link\": \"https://my.pcloud.com/#page=publink&code=LinkCode\",\n    \"code\": \"LinkCode\"\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/showpublink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"showpublink","category":"page"},{"location":"reference/#PCloud.API.showpublink","page":"API Reference","title":"PCloud.API.showpublink","text":"showpublink(client::PCloudClient; kwargs...)\n\nExpects as parameter code that can be either 'code' or 'shortcode'.\n\nThe code could be obtained from:\n\ngetfilepublink - link to a single filegetfolderpublink - link to a foldergettreepublink - link to a treegetcollectionpublink - link to a collection\n\nSource: https://docs.pcloud.com/methods/public_links/showpublink.html\n\nArguments\n\ncode::String: either 'code' or 'shortcode'\n\nOutput\n\nReturns metadata of the object the link points to.\n\nIf the object is folder, the contents field will be present (as in listfolder) with the (recursive) contents of the folder.\n\nThe field isshared of the returned metadata is always false, regardless of the real share status of the file/folder.\n\nOutput Example\n\n{\n    result: 0,\n    metadata: {\n        isshared: false,\n        icon: \"folder\",\n        modified: \"Wed, 18 Sep 2013 10:25:57 +0000\",\n        name: \"Simple folder\",\n        id: \"d21721\",\n        folderid: 21721,\n        ismine: true,\n        isfolder: true,\n        created: \"Wed, 18 Sep 2013 10:18:14 +0000\",\n        thumb: false,\n        contents: [\n            {\n                icon: \"audio\",\n                fileid: 618279,\n                parentfolderid: 21721,\n                size: 17675824,\n                category: 3,\n                isfolder: false,\n                thumb: true,\n                isshared: false,\n                ismine: true,\n                modified: \"Wed, 18 Sep 2013 10:19:05 +0000\",\n                name: \"Simple Audio.mp3\",\n                artist: \"Pcloud\",\n                trackno: 1,\n                genre: \"Genre\",\n                contenttype: \"audio/mpeg\",\n                title: \"Simple Audio\",\n                album: \"The album\",\n                id: \"f618279\",\n                created: \"Wed, 18 Sep 2013 10:18:15 +0000\",\n                hash: 6343095883282229000\n            },\n            ...\n        ]\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/getpublinkdownload.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getpublinkdownload","category":"page"},{"location":"reference/#PCloud.API.getpublinkdownload","page":"API Reference","title":"PCloud.API.getpublinkdownload","text":"getpublinkdownload(client::PCloudClient; kwargs...)\n\nReturns link(s) where the file can be downloaded\n\nExpects as parameter code that can be either 'code' or 'shortcode'.\n\nThe code could be obtained from:\n\ngetfilepublink - link to a single file\n\ngetfolderpublink - link to a folder\n\ngettreepublink - link to a treegetcollectionpublink - link to a collectionIf the link is to a folder also expects fileid.\n\nOptional parameters\n\nforcedownload\n\ncontenttype\n\nskipfilename\n\nmaxspeedwork exaclty as explained in getfilelink.\n\nThis call is intentionally split from showpublink.\n\nGetting download links for files you do not intend to download is considered\n\nbad behaviour.\n\ngetpublinkdownload is to be called when user intents to actually download the file.\n\nSource: https://docs.pcloud.com/methods/public_links/getpublinkdownload.html\n\nArguments\n\ncode::String: either 'code' or 'shortcode'\nfileid::Int: File id, if the link is to a folder\n\nOptional Arguments\n\nforcedownload::Int: Download with 'Content-Type' = 'application/octet-stream'\ncontenttype::String: Set 'Content-Type'\nmaxspeed::Int: limit the download speed\nskipfilename::Int: include the name of the file in the generated link\n\nOutput\n\nReturns link(s) where the file can be downloaded (same as getfilelinkhosts, path and expire are returned).\n\nOutput Example\n\n{\n    result: 0,\n    path: \"/hash/My%20picture.jpg\",\n    expires: \"Thu, 03 Oct 2013 01:06:49 +0000\",\n    hosts: [\n        \"c63.pcloud.com\",\n        \"c1.pcloud.com\"\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/copypubfile.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"copypubfile","category":"page"},{"location":"reference/#PCloud.API.copypubfile","page":"API Reference","title":"PCloud.API.copypubfile","text":"copypubfile(client::PCloudClient; kwargs...)\n\nCopies the file from the public link to the current user's filesystem\n\nExpects as parameter code that can be either 'code' or 'shortcode'.\n\nThe code could be obtained from:\n\ngetfilepublink - link to a single filegetfolderpublink - link to a foldergettreepublink - link to a treegetcollectionpublink - link to a collectionIf the link is to a folder also expects fileid.\n\nAs with copyfile you can either specify topath or tofolderid (with optional toname).\n\nAlso the optional noover works as usual.\n\nSince no actual downloading or traffic happens, using this method does not increment the download nor traffic counters of the public link. Consequently copypubfile can be performed even if the public link has run out of downloads or traffic quota.\n\nImplementations are advised to advertise this function when getpublinkdownload returns an error code identifying out of downloads or out of traffic condition. Unauthenticated users, of course, will have to first register/log in in this case.\n\nSource: https://docs.pcloud.com/methods/public_links/copypubfile.html\n\nArguments\n\ncode::String: either 'code' or 'shortcode'\nfileid::Int: File id, if the link is to a folder\npath::String: path to the target file\ntofolderid::Int: id of destination folder\ntopath::String: destination path\n\nNote that not all are required at single method call\n\nOptional Arguments\n\ntoname::String: name of the destination file. If omitted, then the original filename is used\nnoover::Int: If it is set and file with the specified name already exists, no overwriting will be preformed\n\nOutput\n\nWhen successful, copies the file from the public link to the current user's account and returns the new file's metadata.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"metadata\": {\n        \"category\": 1,\n        \"width\": 900,\n        \"thumb\": true,\n        \"created\": \"Wed, 02 Oct 2013 15:05:17 +0000\",\n        \"hash\": 10681749967730527559,\n        \"icon\": \"image\",\n        \"ismine\": true,\n        \"name\": \"Simple image.jpg\",\n        \"modified\": \"Wed, 02 Oct 2013 15:05:17 +0000\",\n        \"isfolder\": false,\n        \"contenttype\": \"image/jpeg\",\n        \"fileid\": 1732283,\n        \"isshared\": false,\n        \"id\": \"f1732283\",\n        \"size\": 73269,\n        \"parentfolderid\": 28110,\n        \"height\": 600\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/listpublinks.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"listpublinks","category":"page"},{"location":"reference/#PCloud.API.listpublinks","page":"API Reference","title":"PCloud.API.listpublinks","text":"listpublinks(client::PCloudClient; kwargs...)\n\nReturn a list of current user's public links\n\nTakes no parameters\n\nSource: https://docs.pcloud.com/methods/public_links/listpublinks.html\n\nOutput\n\nReturns all user's public links in array publinks. For each link the following fields are provided:\n\nlinkid::Int: this id can be used to delete or modify the link\ncode::String: see getfilepublink\nlink::String: see getfilepublink\ncreated::datetime: date of the link creation\nmodified::datetime: date of last link modification\nmetadata::contents: metadata of the object the link points to (directories will not have )\ndownloads::Int: number of downloads\ntraffic::Int: traffic consumed so far by this link (bytes)\n\nIf the link has a short link:- shortcode::String: see getfilepublink\n\nshortlink::String: see getfilepublink\n\nIf the link has a short link:- expires::datetime: date/time the link will expire (or has expired)\n\nIf the link has download limit:- maxdownloads::Int: maximum number of downloads for this link\n\nIf the link has traffic limit:- maxtraffic::Int: maximum traffic for this link\n\nIt is up to the implementations to detect and properly display links that have expired or reached the download or traffic limit.\n\nOutput Example\n\n{\n    result: 0,\n    publinks: [\n        {\n            downloads: 0,\n            created: \"Thu, 03 Oct 2013 13:06:04 +0000\",\n            link: \"https://my.pcloud.com/#page=publink&code=fileCode\",\n            modified: \"Thu, 03 Oct 2013 13:06:04 +0000\",\n            code: \"fileCode\",\n            traffic: 2027520,\n            linkid: linkid,\n            metadata: {\n                parentfolderid: 21721,\n                created: \"Wed, 18 Sep 2013 10:18:15 +0000\",\n                icon: \"audio\",\n                size: 17675824,\n                album: \"Simple Album\",\n                artist: \"pCloud\",\n                trackno: 1,\n                isfolder: false,\n                contenttype: \"audio/mpeg\",\n                genre: \"Audio\",\n                isshared: false,\n                thumb: true,\n                ismine: true,\n                modified: \"Wed, 18 Sep 2013 10:19:05 +0000\",\n                title: \"Simple Audio\",\n                category: 3,\n                hash: 6343095883282229000,\n                name: \"Simple Audio.mp3\",\n                fileid: 618279,\n                id: \"f618279\"\n            }\n        },\n        {\n            downloads: 0,\n            created: \"Thu, 03 Oct 2013 13:11:44 +0000\",\n            link: \"https://my.pcloud.com/#page=publink&code=folderCode\",\n            modified: \"Thu, 03 Oct 2013 13:11:44 +0000\",\n            code: \"folderCode\",\n            traffic: 0,\n            linkid: linkid,\n            metadata: {\n                isfolder: true,\n                folderid: 21721,\n                isshared: true,\n                thumb: false,\n                modified: \"Wed, 18 Sep 2013 10:25:57 +0000\",\n                parentfolderid: 0,\n                created: \"Wed, 18 Sep 2013 10:18:14 +0000\",\n                ismine: true,\n                icon: \"folder\",\n                name: \"Simple Folder\",\n                id: \"d21721\"\n            }\n        }\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/listplshort.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"listplshort","category":"page"},{"location":"reference/#PCloud.API.listplshort","page":"API Reference","title":"PCloud.API.listplshort","text":"listplshort(client::PCloudClient; kwargs...)\n\nReturn a list of current user's public links listpublinks\n\nThere is no metadata for each link, instead each link has isfolder field and fileid or folderid field.\n\nTakes no parameters\n\nSource: https://docs.pcloud.com/methods/public_links/listplshort.html\n\nOutput\n\nReturns all user's public links in array publinks. For each link the following fields are provided:\n\nlinkid::Int: this id can be used to delete or modify the link\ncode::String: see getfilepublink\nlink::String: see getfilepublink\ncreated::datetime: date of the link creation\nmodified::datetime: date of last link modification\nisfolder::Bool: true if the link is to folder\nfolderid::Int: the ID of the folder, if isfolder=true\nfileid::Int: the ID of the file, if isfolder=false\ntraffic::Int: traffic consumed so far by this link (bytes)\n\nIf the link has a short link:- shortcode::String: see getfilepublink\n\nshortlink::String: see getfilepublink\n\nIf the link has a short link:- expires::datetime: date/time the link will expire (or has expired)\n\nIf the link has download limit:- maxdownloads::Int: maximum number of downloads for this link\n\nIf the link has traffic limit:- maxtraffic::Int: maximum traffic for this link\n\nIt is up to the implementations to detect and properly display links that have expired or reached the download or traffic limit.\n\nOutput Example\n\n{\n    result: 0,\n    publinks: [\n        {\n            isfolder: false,\n            traffic: 2027520,\n            created: \"Thu, 03 Oct 2013 13:06:04 +0000\",\n            fileid: 618279,\n            linkid: 11660,\n            downloads: 0,\n            modified: \"Thu, 03 Oct 2013 13:06:04 +0000\",\n            code: \"fileCode\",\n            id: \"f618279\",\n            link: \"https://my.pcloud.com/#page=publink&code=fileCode\"\n        },\n        {\n            isfolder: true,\n            traffic: 0,\n            created: \"Thu, 03 Oct 2013 13:11:44 +0000\",\n            id: \"d21721\",\n            linkid: 11670,\n            downloads: 0,\n            folderid: 21721,\n            code: \"folderCode\",\n            modified: \"Thu, 03 Oct 2013 13:11:44 +0000\",\n            link: \"https://my.pcloud.com/#page=publink&code=folderCode\"\n        }\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/deletepublink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"deletepublink","category":"page"},{"location":"reference/#PCloud.API.deletepublink","page":"API Reference","title":"PCloud.API.deletepublink","text":"deletepublink(client::PCloudClient; kwargs...)\n\nDelete a specified public link\n\nSource: https://docs.pcloud.com/methods/public_links/deletepublink.html\n\nArguments\n\nlinkid::Int: the ID of the link to be deleted\n\nOutput Example\n\n{\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/changepublink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"changepublink","category":"page"},{"location":"reference/#PCloud.API.changepublink","page":"API Reference","title":"PCloud.API.changepublink","text":"changepublink(client::PCloudClient; kwargs...)\n\nModify a specified public link\n\nSource: https://docs.pcloud.com/methods/public_links/changepublink.html\n\nArguments\n\nlinkid::Int: the ID of the link to be changed\n\nOptional Arguments\n\nOne or more of the following optional parameters MUST be specified:\n\nshortlink::Int: Setting this will create a short link for the link. The response will contain shortcode and shortlink fields.\ndeleteshortlink::Int: Setting this will delete the short link associated with the link\nexpire::datetime: Sets a new expiration date for the link\ndeleteexpire::datetime: If set, deletes link's expiration time (the link will not expire)\nmaxtraffic::Int: modifies the traffic limit, set to 0 for unlimited\nmaxdownloads::Int: modifies the downloads limit, set to 0 for unlimited\n\nOutput Example\n\n{\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/getpubthumb.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getpubthumb","category":"page"},{"location":"reference/#PCloud.API.getpubthumb","page":"API Reference","title":"PCloud.API.getpubthumb","text":"getpubthumb(client::PCloudClient; kwargs...)\n\nGet a thumbnail of a public file\n\nSame as getthumb, but works on public file identified by code (and fileid if link is to a folder)\n\nThe code could be obtained from:\n\ngetfilepublink - link to a single filegetfolderpublink - link to a foldergettreepublink - link to a treegetcollectionpublink - link to a collection\n\nSource: https://docs.pcloud.com/methods/public_links/getpubthumb.html\n\nArguments\n\ncode::String: either 'code' or 'shortcode'\nfileid::Int: id of the file for thumb, if the link is to folder\nsize::String: WIDTHxHEIGHT\n\nOptional Arguments\n\ncrop::Int: If set, then the thumb will be cropped\ntype::String: If set to png, then the thumb will be in png format\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/getpubthumblink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getpubthumblink","category":"page"},{"location":"reference/#PCloud.API.getpubthumblink","page":"API Reference","title":"PCloud.API.getpubthumblink","text":"getpubthumblink(client::PCloudClient; kwargs...)\n\nGet a link to a thumbnatil of a public file\n\nSame as getthumblink, but works on public file identified by code (and fileid if link is to a folder)\n\nThe code could be obtained from:\n\ngetfilepublink - link to a single filegetfolderpublink - link to a foldergettreepublink - link to a treegetcollectionpublink - link to a collection\n\nSource: https://docs.pcloud.com/methods/public_links/getpubthumblink.html\n\nArguments\n\ncode::String: either 'code' or 'shortcode'\nfileid::Int: id of the file for thumb, if the link is to folder\nsize::String: WIDTHxHEIGHT\n\nOptional Arguments\n\ncrop::Int: If set, then the thumb will be cropped\ntype::String: If set to png, then the thumb will be in png format\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/getpubthumbslinks.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getpubthumbslinks","category":"page"},{"location":"reference/#PCloud.API.getpubthumbslinks","page":"API Reference","title":"PCloud.API.getpubthumbslinks","text":"getpubthumbslinks(client::PCloudClient; kwargs...)\n\nGet a link to a thumbnatil of a public file\n\nSame as getthumbslinks, but works on public file identified by code (and fileid if link is to a folder)\n\nThe code could be obtained from:\n\ngetfilepublink - link to a single filegetfolderpublink - link to a foldergettreepublink - link to a treegetcollectionpublink - link to a collection\n\nSource: https://docs.pcloud.com/methods/public_links/getpubthumbslinks.html\n\nArguments\n\ncode::String: either 'code' or 'shortcode'\nfileid::Int: id of the file for thumb, if the link is to folder\nsize::String: WIDTHxHEIGHT\n\nOptional Arguments\n\ncrop::Int: If set, then the thumb will be cropped\ntype::String: If set to png, then the thumb will be in png format\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/savepubthumb.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"savepubthumb","category":"page"},{"location":"reference/#PCloud.API.savepubthumb","page":"API Reference","title":"PCloud.API.savepubthumb","text":"savepubthumb(client::PCloudClient; kwargs...)\n\nCreate a thumbnail of a public link file and save it in the current user's filesystem\n\nSame as savethumb, but works on public file identified by code (and fileid if link is to a folder)\n\nThe code could be obtained from:\n\ngetfilepublink - link to a single filegetfolderpublink - link to a foldergettreepublink - link to a treegetcollectionpublink - link to a collection\n\nSource: https://docs.pcloud.com/methods/public_links/savepubthumb.html\n\nArguments\n\ncode::String: either 'code' or 'shortcode'\nfileid::Int: id of the file for thumb, if the link is to folder\nsize::String: WIDTHxHEIGHT\ntopath::String: filepath where to save the thumb\ntofolderid::Int: folder id of the folder where to save the thumb\ntoname::String: filename to save the thumb\n\nUse fileid or path\n\nUse topath or tofolderid+toname\n\nOptional Arguments\n\ncrop::Int: If set, then the thumb will be cropped\ntype::String: If set to png, then the thumb will be in png format\nnoover::Int: If set, then will rise error on overwriting\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/getpubzip.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getpubzip","category":"page"},{"location":"reference/#PCloud.API.getpubzip","page":"API Reference","title":"PCloud.API.getpubzip","text":"getpubzip(client::PCloudClient; kwargs...)\n\nCreate a zip archive file of a public link file and download it\n\nSame as getzip, but works on public file identified by code (and fileid if link is to a folder)\n\nTakes code and optional parameters to define a tree and streams a zip file.\n\nThe code could be obtained from:\n\ngetfilepublink - link to a single filegetfolderpublink - link to a foldergettreepublink - link to a treegetcollectionpublink - link to a collectionfilename, forcedownload and timeoffset optional parameters work the same way as in getzip.\n\nSource: https://docs.pcloud.com/methods/public_links/getpubzip.html\n\nArguments\n\ncode::String: either 'code' or 'shortcode'\n\nOptional Arguments\n\nforcedownload::Int: If it is set, the content-type will be 'application/octet-stream', if not - 'application/zip'.\nfilename::String: If it is provided, this is sent back as 'Content-Disposition' header, forcing the browser to adopt this filename when downloading the file. Filename is passed unaltered, so it MUST include the .zip extension.\ntimeoffset::String: desired time offset\n\nOutput\n\nWhen successful it returns a zip archive over the current API connection with all the files and directories in the requested tree.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/getpubziplink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getpubziplink","category":"page"},{"location":"reference/#PCloud.API.getpubziplink","page":"API Reference","title":"PCloud.API.getpubziplink","text":"getpubziplink(client::PCloudClient; kwargs...)\n\nCreate a link to a zip archive file of a public link file\n\nSame as getziplink, but works on public file identified by code\n\ngetpubziplink is slower and less efficient than getpubzip and takes time to generate the zip file as opposed to the former which starts the download right away.\n\nTakes code and optional parameters to define a tree and streams a zip file.\n\nThe code could be obtained from:getfilepublink - link to a single filegetfolderpublink - link to a foldergettreepublink - link to a treegetcollectionpublink - link to a collection\n\nSource: https://docs.pcloud.com/methods/public_links/getpubziplink.html\n\nArguments\n\ncode::String: either 'code' or 'shortcode'\n\nOptional Arguments\n\nforcedownload::Int: If it is set, the content-type will be 'application/octet-stream', if not - 'application/zip'.\nfilename::String: If it is provided, this is sent back as 'Content-Disposition' header, forcing the browser to adopt this filename when downloading the file. Filename is passed unaltered, so it MUST include the .zip extension.\ntimeoffset::String: desired time offset\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/savepubzip.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"savepubzip","category":"page"},{"location":"reference/#PCloud.API.savepubzip","page":"API Reference","title":"PCloud.API.savepubzip","text":"savepubzip(client::PCloudClient; kwargs...)\n\nCreate a zip archive file of a public link file in the current user filesystem\n\nSame as savezip, but works on public file identified by code\n\nTakes code and optional parameters to define a tree and streams a zip file.\n\nThe code could be obtained from:\n\ngetfilepublink - link to a single filegetfolderpublink - link to a foldergettreepublink - link to a treegetcollectionpublink - link to a collection\n\nSource: https://docs.pcloud.com/methods/public_links/savepubzip.html\n\nArguments\n\ncode::String: either 'code' or 'shortcode'\n\nOptional Arguments\n\ntimeoffset::String: desired time offset\ntopath::String: path where to save the zip archive\ntofolderid::Int: foldre id of the folder, where to save the zip archive\ntoname::String: filename of the desired zip archive\n\nOutput\n\nIf successful creates the zip archive and returns its metadata.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/getpubvideolinks.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getpubvideolinks","category":"page"},{"location":"reference/#PCloud.API.getpubvideolinks","page":"API Reference","title":"PCloud.API.getpubvideolinks","text":"getpubvideolinks(client::PCloudClient; kwargs...)\n\nReturns variants array of different quality/resolution versions of a video in a public link.\n\nSame as getvideolinks, but works on public file identified by code (and fileid if link is to a folder).\n\nThe code could be obtained from:\n\ngetfilepublink - link to a single filegetfolderpublink - link to a foldergettreepublink - link to a treegetcollectionpublink - link to a collection\n\nSource: https://docs.pcloud.com/methods/public_links/getpubvideolinks.html\n\nArguments\n\ncode::String: either 'code' or 'shortcode'\n\nOptional Arguments\n\nfileid::Int: id of the file, if the public link is to a folder\nforcedownload::Int: Download with Content-Type = application/octet-stream\ncontenttype::String: Set Content-Type\nmaxspeed::Int: limit the download speed\nskipfilename::Bool: include the name of the file in the generated link\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/getpubaudiolink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getpubaudiolink","category":"page"},{"location":"reference/#PCloud.API.getpubaudiolink","page":"API Reference","title":"PCloud.API.getpubaudiolink","text":"getpubaudiolink(client::PCloudClient; kwargs...)\n\nCreate a link to a audio file of a public link file. The link could be used for streaming.\n\nSame as getaudiolink, but works on public file identified by code (and fileid if link is to a folder)\n\nThe code could be obtained from:\n\ngetfilepublink - link to a single filegetfolderpublink - link to a foldergettreepublink - link to a treegetcollectionpublink - link to a collection\n\nSource: https://docs.pcloud.com/methods/public_links/getpubaudiolink.html\n\nArguments\n\ncode::String: either 'code' or 'shortcode'\n\nOptional Arguments\n\nfileid::Int: id of the file, if the public link is to a folder\nforcedownload::Int: Download with Content-Type = application/octet-stream\ncontenttype::String: Set Content-Type\nabitrate::Int: audio bit rate in kilobits, from 16 to 320\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/getpubtextfile.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getpubtextfile","category":"page"},{"location":"reference/#PCloud.API.getpubtextfile","page":"API Reference","title":"PCloud.API.getpubtextfile","text":"getpubtextfile(client::PCloudClient; kwargs...)\n\nDownload a file in different character encoding The file is streamed as response to this method by the content server.\n\nSame as gettextfile, but works on public file identified by code (and fileid if link is to a folder)\n\nThe code could be obtained from:\n\ngetfilepublink - link to a single filegetfolderpublink - link to a foldergettreepublink - link to a treegetcollectionpublink - link to a collection\n\nSource: https://docs.pcloud.com/methods/public_links/getpubtextfile.html\n\nArguments\n\ncode::String: either 'code' or 'shortcode'\n\nOptional Arguments\n\nfileid::Int: id of the file, if the public link is to a folder\nfromencoding::String: the original character encoding of the file (default: guess)\ntoencoding::String: requested character encoding of the output (default: utf-8)\nforcedownload::Int: Download with Content-Type = application/octet-stream\ncontenttype::String: Set Content-Type\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/public_links/getcollectionpublink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getcollectionpublink","category":"page"},{"location":"reference/#PCloud.API.getcollectionpublink","page":"API Reference","title":"PCloud.API.getcollectionpublink","text":"getcollectionpublink(client::PCloudClient; kwargs...)\n\nGenerates a public link to a collection, owned by the current user.\n\nThis method has the same optional parameters as getfilepublink.\n\nNote: Public links pointing to a collection have the advantage that are real time image of the collection, while tree links are snapshots.\n\nSource: https://docs.pcloud.com/methods/public_links/getcollectionpublink.html\n\nArguments\n\ncollectionid::Int: the id of the collection\n\nOptional Arguments\n\nexpire::datetime: Datetime when the link will stop working\nmaxdownloads::Int: Maximum number of downloads from this folder (even for the same file).\nmaxtraffic::Int: Maximum traffic that this link will consume (in bytes, started downloads will not be cut to fit in this limit)\nshortlink::Int: If set, a short link will also be generated\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"link\": \"https://my.pcloud.com/#page=publink&code=PUBLIC_LINK_CODE\",\n    \"code\": \"PUBLIC_LINK_CODE\",\n    \"linkid\": LINK_ID\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/#Thumbnails","page":"API Reference","title":"Thumbnails","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.getthumblink\nPCloud.getthumbslinks\nPCloud.getthumb\nPCloud.savethumb","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/thumbnails/getthumblink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getthumblink","category":"page"},{"location":"reference/#PCloud.API.getthumblink","page":"API Reference","title":"PCloud.API.getthumblink","text":"getthumblink(client::PCloudClient; kwargs...)\n\nGet a link to a thumbnail of a file\n\nTakes fileid (or path) as parameter and provides links from which a thumbnail of the file can be downloaded.\n\nThumbnails can be created only from files whose metadata has thumb value set to true.\n\nThe parameter size MUST be provided, in the format WIDTHxHEIGHT.\n\nThe width MUST be between 16 and 2048, and divisible by either 4 or 5.\n\nThe height MUST be between 16 and 1024, and divisible by either 4 or 5.\n\nBy default the thumb will have the same aspect ratio as the original image, so the resulting thumbnail width or height (but not both) might be less than requested.\n\nIf you want thumbnail exactly the size specified, you can set crop parameter. With crop, thumbnails will still have the right aspect ratio, but if needed some rows or cols (but not both) will be cropped from both sides. So if you have 1024x768 image and are trying to create 128x128 thumbnail, first the image will be converted to 768x768 by cutting 128 columns from both sides and then resized to 128x128. To create a rectangular thumb from 4:3 image exactly 1/8 is cropped from each side. By default the thumbnail is in jpeg format.\n\nIf the type parameter is set to png, a png image will be produced.\n\nThumbs are created on first request and cached for unspecified amount of time (or until file) changes.\n\nClients should attempt to cache thumbs if space permits.\n\nIt is also advisable to monitor the original file's hash to see if it has changed. If yes, a new thumbnail MUST be requested.\n\nSource: https://docs.pcloud.com/methods/thumbnails/getthumblink.html\n\nArguments\n\nfileid::Int: id of the file for thumb\npath::String: filepath to the file for thumb\nsize::String: WIDTHxHEIGHT\n\nUse fileid or path\n\nOptional Arguments\n\ncrop::Int: If set, then the thumb will be cropped\ntype::String: If set to png, then the thumb will be in png format\n\nOutput\n\nOn success the same data as with getfilelink is returned.\n\nAdditionally the real image produced size is returned\n\nIt will match reqested size if crop is specified or may differ otherwise.\n\nOutput Example\n\n{\n    result: 0,\n    size: \"32x32\",\n    path: \"/hash/My%20thumb.jpg\",\n    expires: \"Thu, 03 Oct 2013 01:06:49 +0000\",\n    hosts: [\n        \"c63.pcloud.com\",\n        \"c1.pcloud.com\"\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/thumbnails/getthumbslinks.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getthumbslinks","category":"page"},{"location":"reference/#PCloud.API.getthumbslinks","page":"API Reference","title":"PCloud.API.getthumbslinks","text":"getthumbslinks(client::PCloudClient; kwargs...)\n\nGet a link to thumbnails of a list of files\n\nTakes in fileids parameter coma-separated list of fileids and returns thumbs for all the files.\n\nsize, type and crop work like in getthumblink and are all the same for all files.\n\nIf you need to generate multiple thumbnails getthumbslinks is preferable than multiple calls to getthumblink (even if pipelined)\n\ngetthumbslinks connects to multiple storage serves simultaneously to generate thumbs and in most cases it is just slightly slower than a single call to getthumblink even if multiple thumbnails are requested.\n\nSource: https://docs.pcloud.com/methods/thumbnails/getthumbslinks.html\n\nArguments\n\nfileids::String: coma-separated list of fileids\nsize::String: WIDTHxHEIGHT\n\nOptional Arguments\n\ncrop::Int: If set, then the thumb will be cropped\ntype::String: If set to png, then the thumb will be in png format\n\nOutput\n\nThe method returns an array thumbs with objects. Each object has result and fileid set.\n\nIf result is non-zero, error is also provided.\n\nOtherwise path, hosts, expires and size are provided as in getfilelink.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"thumbs\": [\n        {\n            \"expires\": \"Thu, 03 Oct 2013 23:04:48 +0000\",\n            \"size\": \"32x32\",\n            \"result\": 0,\n            \"path\": \"/dFZVBFVZIpqkZIJZZdzeqC7Z3VZZmb0ZedrcUj5eXifiCM1JvlWCtfOG0zsy/th-FileID-32x32.png\",\n            \"fileid\": FileID,\n            \"hosts\": [\n                \"c14.pcloud.com\"\n            ]\n        },\n        ...\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/thumbnails/getthumb.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getthumb","category":"page"},{"location":"reference/#PCloud.API.getthumb","page":"API Reference","title":"PCloud.API.getthumb","text":"getthumb(client::PCloudClient; kwargs...)\n\nGet a thumbnail of a file\n\nTakes the same parameters as getthumblink, but returns the thumbnail over the current API connection.\n\nGetting thumbnails from API servers is generally NOT faster than getting them from storage servers.\n\nIt makes sense only if you are reusing the (possibly expensive to open SSL) API connection.\n\nSource: https://docs.pcloud.com/methods/thumbnails/getthumb.html\n\nArguments\n\nfileid::Int: id of the file for thumb\npath::String: filepath to the file for thumb\nsize::String: WIDTHxHEIGHT\n\nUse fileid or path\n\nOptional Arguments\n\ncrop::Int: If set, then the thumb will be cropped\ntype::String: If set to png, then the thumb will be in png format\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/thumbnails/savethumb.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"savethumb","category":"page"},{"location":"reference/#PCloud.API.savethumb","page":"API Reference","title":"PCloud.API.savethumb","text":"savethumb(client::PCloudClient; kwargs...)\n\nCreate a thumbnail of a file and save it in the current user's filesystem\n\ntakes the same parameters as getthumblink in addition to topath or tofolderid+toname and save the generated thumbnail as a file.\n\nAs usual by default this call overwrites existing files (saving the old one as revision) unless the noover parameter is set. In that case 'File or folder alredy exists.' error will be generated.\n\nIf toname is not provided, but tofolderid is, the file's original name is used for the thumbnail.\n\nSimilarly if topath ends with a slash ('/'), the original filename is appended.\n\nSource: https://docs.pcloud.com/methods/thumbnails/savethumb.html\n\nArguments\n\nfileid::Int: id of the file for thumb\npath::String: filepath to the file for thumb\nsize::String: WIDTHxHEIGHT\ntopath::String: filepath where to save the thumb\ntofolderid::Int: folder id of the folder where to save the thumb\ntoname::String: filename to save the thumb\n\nUse fileid or path\n\nUse topath or tofolderid+toname\n\nOptional Arguments\n\ncrop::Int: If set, then the thumb will be cropped\ntype::String: If set to png, then the thumb will be in png format\nnoover::Int: If set, then will rise error on overwriting\n\nOutput\n\nOn success returns metadata, width and height.\n\nOutput Example\n\n{\n    result: 0,\n    height: 32,\n    width: 32,\n    metadata: {\n        path: \"/my%20thumb.jpg\",\n        thumb: true,\n        modified: \"Thu, 03 Oct 2013 15:30:43 +0000\",\n        parentfolderid: 0,\n        created: \"Thu, 03 Oct 2013 15:30:43 +0000\",\n        ismine: true,\n        category: 1,\n        hash: 1154152318038973000,\n        isshared: false,\n        contenttype: \"image/jpeg\",\n        fileid: 1818093,\n        size: 650,\n        id: \"f1818093\",\n        icon: \"image\",\n        name: \"my thumb.jpg\",\n        isfolder: false\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/#Upload-Links","page":"API Reference","title":"Upload Links","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.createuploadlink\nPCloud.listuploadlinks\nPCloud.deleteuploadlink\nPCloud.changeuploadlink\nPCloud.showuploadlink\nPCloud.uploadtolink\nPCloud.uploadlinkprogress\nPCloud.copytolink","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/upload_links/createuploadlink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"createuploadlink","category":"page"},{"location":"reference/#PCloud.API.createuploadlink","page":"API Reference","title":"PCloud.API.createuploadlink","text":"createuploadlink(client::PCloudClient; kwargs...)\n\nCreates upload link.\n\nExpects folderid/path of the folder where the uploaded files will be saved. The folder must be owned by the user. Share may be subject to confirmation from the other user.\n\nThe folder to be shared is identified by folderid or path.\n\nAlso SHOULD have a comment parameter that contains any comments/instructions the user is willing to provide to uploading users. Comments are the only information that uploading users will see (they will not know username of the owner nor the name of the folder they are uploading into) so implementations SHOULD instruct users to fill in at least some description of what is expected from the uploaders (e.g. Hey, that's Mike. Please upload any pictures you took at my wedding here.).\n\nOptional parameter expire may indicate a date/time at which the link will stop working.\n\nAlso optionally maxspace and maxfiles may limit maximum total size (in bytes) and total number of files that can be uploaded.\n\nSource: https://docs.pcloud.com/methods/upload_links/createuploadlink.html\n\nArguments\n\nfolderid::Int: folder id of the folder, where the uploaded files will be saved\npath::String: path to the shared folder, where the uploaded files will be saved\ncomment::String: comment the user is willing to provide to uploading users\n\nUse path or folderid\n\nOptional Arguments\n\nexpire::datetime: date/time at which the link will stop working.\nmaxspace::Int: limit maximum total size (in bytes)\nmaxfiles::Int: otal number of files that can be uploaded\n\nOutput\n\nOn success returns\n\nuploadlinkid::Int: can be used to modify/delete this link\nlink::String: full link to a page where files can be uploaded\nmail::String: an email address that also can be used to upload files to this link\ncode::String: link's code that can be used to upload files.\n\n{\n\n\"result\": 0,\n\n\"code\": \"linkCode\",\n\n\"mail\": \"somewhere@u.pcloud.com\",\n\n\"uploadlinkid\": linkID,\n\n\"link\": \"https://my.pcloud.com/#page=puplink&code=linkCode\"\n\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/upload_links/listuploadlinks.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"listuploadlinks","category":"page"},{"location":"reference/#PCloud.API.listuploadlinks","page":"API Reference","title":"PCloud.API.listuploadlinks","text":"listuploadlinks(client::PCloudClient; kwargs...)\n\nLists all upload links in uploadlinks.\n\nSource: https://docs.pcloud.com/methods/upload_links/listuploadlinks.html\n\nOutput\n\nFor each link lists:\n\nuploadlinkid::Int: can be used to modify/delete this link\nlink::String: full link to a page where files can be uploaded\nmail::String: an email address that also can be used to upload files to this link\ncode::String: link's code that can be used to upload files\ncomment::String: comment of the upload link\nfiles::Int: number of uploaded files\nspace::Int: total space occupied by uploaded files in bytes\nmetadata::metadata: target folder's metadata\ncreated::datetime: when the link was created\nlast modified::datetime: when the link was last modified\n\nOptionally if specified at creation time:- expire::datetime: date/time at which the link will stop working.\n\nmaxspace::Int: limit maximum total size (in bytes)\nmaxfiles::Int: otal number of files that can be uploaded\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"uploadlinks\": [\n        {\n            \"space\": 23640,\n            \"files\": 23,\n            \"mail\": \"somewhere@u.pcloud.com\",\n            \"maxspace\": 524288000,\n            \"created\": \"Fri, 04 Oct 2013 16:26:41 +0000\",\n            \"code\": \"linkCode\",\n            \"maxfiles\": 100,\n            \"comment\": \"Upload link comment\",\n            \"link\": \"https://my.pcloud.com/#page=puplink&code=linkCode\",\n            \"uploadlinkid\": UploadLinkID,\n            \"modified\": \"Fri, 04 Oct 2013 16:26:41 +0000\",\n            \"metadata\": {\n                \"isfolder\": true,\n                \"folderid\": folderid,\n                \"thumb\": false,\n                \"icon\": \"folder\",\n                \"created\": \"Wed, 18 Sep 2013 10:18:14 +0000\",\n                \"ismine\": true,\n                \"isshared\": true,\n                \"parentfolderid\": 0,\n                \"name\": \"Simple Upload Place\",\n                \"modified\": \"Wed, 18 Sep 2013 10:25:57 +0000\",\n                \"id\": \"id\"\n            }\n        }\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/upload_links/deleteuploadlink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"deleteuploadlink","category":"page"},{"location":"reference/#PCloud.API.deleteuploadlink","page":"API Reference","title":"PCloud.API.deleteuploadlink","text":"deleteuploadlink(client::PCloudClient; kwargs...)\n\nDeletes upload link identified by uploadlinkid.\n\nSource: https://docs.pcloud.com/methods/upload_links/deleteuploadlink.html\n\nArguments\n\nuploadlinkid::Int: id of the deleted upload link\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/upload_links/changeuploadlink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"changeuploadlink","category":"page"},{"location":"reference/#PCloud.API.changeuploadlink","page":"API Reference","title":"PCloud.API.changeuploadlink","text":"changeuploadlink(client::PCloudClient; kwargs...)\n\nModify upload link identified by uploadlinkid.\n\nOptions that, could be changed include:\n\nExpiration date\n\nSpace of the upload link\n\nFiles of the upload link\n\nSource: https://docs.pcloud.com/methods/upload_links/changeuploadlink.html\n\nArguments\n\nuploadlinkid::Int: id of the upload link\n\nOptional Arguments\n\nexpire::datetime: set expiration date of the link\ndeleteexpire::Int: if set, link's expiration date is removed\nmaxspace::Int: alter the maximum available space (in bytes) of the link\nmaxfiles::Int: alter the maximum available files of the link\n\nSet maxspace or maxfiles to 0 to remove the given limit.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/upload_links/showuploadlink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"showuploadlink","category":"page"},{"location":"reference/#PCloud.API.showuploadlink","page":"API Reference","title":"PCloud.API.showuploadlink","text":"showuploadlink(client::PCloudClient; kwargs...)\n\nExpects upload link code and returns back the link's comment and mail.\n\nIf the link is deleted or expired, returns proper 7xxx error, which should be expected by the implementations.\n\nModify upload link identified by uploadlinkid. Options that, could be changed include:\n\nExpiration date\n\nSpace of the upload link\n\nFiles of the upload link\n\nSource: https://docs.pcloud.com/methods/upload_links/showuploadlink.html\n\nArguments\n\nuploadlinkid::Int: id of the upload link\n\nOptional Arguments\n\nexpire::datetime: set expiration date of the link\ndeleteexpire::Int: if set, link's expiration date is removed\nmaxspace::Int: alter the maximum available space (in bytes) of the link\nmaxfiles::Int: alter the maximum available files of the link\n\nSet maxspace or maxfiles to 0 to remove the given limit.\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/upload_links/uploadtolink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"uploadtolink","category":"page"},{"location":"reference/#PCloud.API.uploadtolink","page":"API Reference","title":"PCloud.API.uploadtolink","text":"uploadtolink(client::PCloudClient; kwargs...)\n\nUpload file(s) to a upload link. Expects code.\n\nMost things that apply to uploadfile also apply here, especially progresshash can be used in the same manner to monitor upload progress with uploadlinkprogress.\n\nThere is a slight difference that renameifexists is omitted and the uploaded file is always renamed when a file with the requested name exists in the upload link.\n\nSource: https://docs.pcloud.com/methods/upload_links/uploadtolink.html\n\nArguments\n\ncode::String: code of the link\n\nOptional Arguments\n\nnopartial::Int: If is set, partially uploaded files will not be saved\nprogresshash::String: hash used for observing upload progress\n\nOutput Example\n\n{\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/upload_links/uploadlinkprogress.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"uploadlinkprogress","category":"page"},{"location":"reference/#PCloud.API.uploadlinkprogress","page":"API Reference","title":"PCloud.API.uploadlinkprogress","text":"uploadlinkprogress(client::PCloudClient; kwargs...)\n\nMonitor the progress of uploaded files.\n\nSource: https://docs.pcloud.com/methods/upload_links/uploadlinkprogress.html\n\nArguments\n\ncode::String: code of the upload link\nprogresshash::String: hash for monitoring passed to uploadtolink\n\nOutput\n\nReturns same data as uploadprogress but without files.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/upload_links/copytolink.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"copytolink","category":"page"},{"location":"reference/#PCloud.API.copytolink","page":"API Reference","title":"PCloud.API.copytolink","text":"copytolink(client::PCloudClient; kwargs...)\n\nCopy a file from the current user's filesystem to a upload link.\n\nSource: https://docs.pcloud.com/methods/upload_links/copytolink.html\n\nArguments\n\ncode::String: code of the upload link\nfileid::Int: id of the copied file\npath::String: path the copied file\n\nUse \"fileid\" or \"path\"\n\nOptional Arguments\n\ntoname \"string\" the name to save the copied file. If it is not provided, then the name of the file is used.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Revisions","page":"API Reference","title":"Revisions","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.listrevisions\nPCloud.revertrevision","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/revisions/listrevisions.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"listrevisions","category":"page"},{"location":"reference/#PCloud.API.listrevisions","page":"API Reference","title":"PCloud.API.listrevisions","text":"listrevisions(client::PCloudClient; kwargs...)\n\nLists revisions for a given fileid / path\n\nSource: https://docs.pcloud.com/methods/revisions/listrevisions.html\n\nArguments\n\nfileid::Int: id of the revisioned file\npath::String: path the revisioned file\n\nUse fileid or path\n\nOutput\n\nLists the revisions as array, each element with the following fields:\n\nrevisionid::Int: id of the revision\nsize::Int: filesize of the given revision of the file\nhash::String: file contents hash (same as in metadata)\ncreated::datetime: date/time at which the revision was created\n\nAlso returns the metadata of the file.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/revisions/revertrevision.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"revertrevision","category":"page"},{"location":"reference/#PCloud.API.revertrevision","page":"API Reference","title":"PCloud.API.revertrevision","text":"revertrevision(client::PCloudClient; kwargs...)\n\nTakes fileid/path and revisionid as parameters and reverts the file to a given revision.\n\nCurrent file contents are saved as new revision.\n\nSource: https://docs.pcloud.com/methods/revisions/revertrevision.html\n\nArguments\n\nfileid::Int: id of the reverted file\npath::String: path the reverted file\nrevisionid::Int: id of the revistion, to which the file is reverted\n\nUse fileid or path\n\nOutput\n\nOn success returns new metadata of the file.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Fileops","page":"API Reference","title":"Fileops","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.file_open\nPCloud.file_write\nPCloud.file_pwrite\nPCloud.file_read\nPCloud.file_pread\nPCloud.file_pread_ifmod\nPCloud.file_checksum\nPCloud.file_size\nPCloud.file_truncate\nPCloud.file_seek\nPCloud.file_close\nPCloud.file_lock","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/fileops/file_open.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"file_open","category":"page"},{"location":"reference/#PCloud.API.file_open","page":"API Reference","title":"PCloud.API.file_open","text":"file_open(client::PCloudClient; kwargs...)\n\nOpens a file descriptor.\n\nSource: https://docs.pcloud.com/methods/fileops/file_open.html\n\nArguments\n\nflags::Int: which can be a combination of the file_open flags.\n\nOptional Arguments\n\npath::String: path to the file, for which the file descirptior is created.\nfileid::Int: id of the folder, for which the file descirptior is created.\nfolderid::Int: id of the folder, in which new file is created and file descirptior is returned.\nname::String: name of the file, in which new file is created and file descirptior is returned.\n\nThe use of these parameters, depends on the flags are given. Please, see the details below.\n\nOutput\n\nOn success returns fd file descriptor which can be used in successive operations. Also returns the fileid of the file (useful when creating file).\n\nOutput Example\n\n{\n    result: 0,\n    fd: 1,\n    fileid: 3489\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/fileops/file_write.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"file_write","category":"page"},{"location":"reference/#PCloud.API.file_write","page":"API Reference","title":"PCloud.API.file_write","text":"file_write(client::PCloudClient; kwargs...)\n\nWrites as much data as you send to the file descriptor fd to the current file offset and adjusts the offset.\n\nYou can see how to send data here.\n\nSource: https://docs.pcloud.com/methods/fileops/file_write.html\n\nArguments\n\nfd::Int: the file descriptor, to which data is written\n\nOutput\n\nReturns bytes (number of bytes) written.\n\nOutput Example\n\n{\n    result: 0,\n    bytes: 124\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/fileops/file_pwrite.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"file_pwrite","category":"page"},{"location":"reference/#PCloud.API.file_pwrite","page":"API Reference","title":"PCloud.API.file_pwrite","text":"file_pwrite(client::PCloudClient; kwargs...)\n\nWrites as much data as you send to the file descriptor fd. Data is written at the offset that is provided as parameter.\n\nfilepwrite ignores the OAPPEND flag. The file's offset is not changed.\n\nYou can see how to send data here.\n\nSource: https://docs.pcloud.com/methods/fileops/file_pwrite.html\n\nArguments\n\nfd::Int: the file descriptor, to which data is written\noffset::Int: the offset in bytes, from where the data is written\n\nOutput\n\nReturns bytes (number of bytes) written.\n\nOutput Example\n\n{\n    result: 0,\n    bytes: 124\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/fileops/file_read.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"file_read","category":"page"},{"location":"reference/#PCloud.API.file_read","page":"API Reference","title":"PCloud.API.file_read","text":"file_read(client::PCloudClient; kwargs...)\n\nTries to read at most count bytes at the current offset of the file.\n\nIf currentofset+count<=filesize this method will satisfy the request and read count bytes, otherwise it will return just the bytes available (this is the only way to discover the EOF condition).\n\nYou can see how to read data here.\n\nSource: https://docs.pcloud.com/methods/fileops/file_read.html\n\nArguments\n\nfd::Int: the file descriptor, from which data is read\ncount::Int: count in bytes, which to be read from the descriptor\n\nOutput\n\nReturns the data.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/fileops/file_pread.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"file_pread","category":"page"},{"location":"reference/#PCloud.API.file_pread","page":"API Reference","title":"PCloud.API.file_pread","text":"file_pread(client::PCloudClient; kwargs...)\n\nTries to read at most count bytes at the given offset of the file.\n\nYou can see how to read data here.\n\nSource: https://docs.pcloud.com/methods/fileops/file_pread.html\n\nArguments\n\nfd::Int: the file descriptor, from which data is read\ncount::Int: count in bytes, which to be read from the descriptor\noffset::Int: in bytes, from where to start reading in the file\n\nOutput\n\nReturns the data.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/fileops/filepreadifmod.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"file_pread_ifmod","category":"page"},{"location":"reference/#PCloud.API.file_pread_ifmod","page":"API Reference","title":"PCloud.API.file_pread_ifmod","text":"file_pread_ifmod(client::PCloudClient; kwargs...)\n\nSame as file_pread, but additionally expects sha1 or md5 parameter (hex).\n\nIf the checksum of the data to be read matches the sha1 or md5 checksum, it returns error code 6000 Not modified.\n\nThis call is useful if the application has the data cached and wants to verify if it still current.\n\nYou can see how to read data here.\n\nSource: https://docs.pcloud.com/methods/fileops/filepreadifmod.html\n\nArguments\n\nfd::Int: the file descriptor, from which data is read\ncount::Int: count in bytes, which to be read from the descriptor\noffset::Int: in bytes, from where to start reading in the file\nsha1::String: the SHA-1 checksum of the part of the file from the offset, to be checked\nmd5::String: the MD5 checksum of the part of the file from the offset, to be checked\n\nUse sha1 or md5, but not both.\n\nOutput\n\nReturns the data.\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/fileops/file_checksum.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"file_checksum","category":"page"},{"location":"reference/#PCloud.API.file_checksum","page":"API Reference","title":"PCloud.API.file_checksum","text":"file_checksum(client::PCloudClient; kwargs...)\n\nCalculates checksums of count bytes at offset from the file descripor fd.\n\nDO NOT use this function to calculate checksums of an entire, unmodified file, use checksumfile instead.\n\nSource: https://docs.pcloud.com/methods/fileops/file_checksum.html\n\nArguments\n\nfd::Int: the file descriptor, for which checksums are calculated\ncount::Int: count in bytes, for which checksums are calculated\noffset::Int: from where in bytes the checksum calculation starts\n\nOutput\n\nReturns sha1, md5 and size.\n\nsize will be equal to count unless bytes past current filesize are requested to be checksummed.\n\nOutput Example\n\n{\n    result: 0,\n    sha1: \"SHA-1 checksum\",\n    md5: \"MD5 checksum\",\n    size: \"count of bytes, for which the checksums are calculated\"\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/fileops/file_size.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"file_size","category":"page"},{"location":"reference/#PCloud.API.file_size","page":"API Reference","title":"PCloud.API.file_size","text":"file_size(client::PCloudClient; kwargs...)\n\nGives size (in bytes) and current offset for a given fd.\n\nSource: https://docs.pcloud.com/methods/fileops/file_size.html\n\nArguments\n\nfd::Int: the file descriptor, for which the size and offset are given\n\nOutput Example\n\n{\n    result: 0,\n    size: \"Size of the \",\n    offset: \"Current offset\"\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/fileops/file_truncate.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"file_truncate","category":"page"},{"location":"reference/#PCloud.API.file_truncate","page":"API Reference","title":"PCloud.API.file_truncate","text":"file_truncate(client::PCloudClient; kwargs...)\n\nSets file size to length bytes.\n\nIf length is less than the file size, then the extra data is cut from the file, else the the file contents are extended with zeroes as needed.\n\nThe current offset is not modified.\n\nSource: https://docs.pcloud.com/methods/fileops/file_truncate.html\n\nArguments\n\nfd::Int: the file descriptor, for which the size and offset are given\nlength::Int: to how much bytes to set the file size\n\nOutput Example\n\n{\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/fileops/file_seek.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"file_seek","category":"page"},{"location":"reference/#PCloud.API.file_seek","page":"API Reference","title":"PCloud.API.file_seek","text":"file_seek(client::PCloudClient; kwargs...)\n\nSets the current offset of the file descriptor to offset bytes.\n\nThis methods works in the following modes, depending on the whence parameter:\n\n0: moves after beginning of the file\n1: after current position\n2: after end of the file\n\nSource: https://docs.pcloud.com/methods/fileops/file_seek.html\n\nArguments\n\nfd::Int: the file descriptor, for which the current offset is changed\noffset::Int: the offset in bytes, to which to move the current offset\n\nOptional Arguments\n\nwhence::Int: mode, in which the offset seek works. Default value is 0\n\nOutput\n\nReturns the new offset.\n\nOutput Example\n\n{\n    result: 0,\n    offset: 1024\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/fileops/file_close.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"file_close","category":"page"},{"location":"reference/#PCloud.API.file_close","page":"API Reference","title":"PCloud.API.file_close","text":"file_close(client::PCloudClient; kwargs...)\n\nCloses the file descriptor.\n\nSource: https://docs.pcloud.com/methods/fileops/file_close.html\n\nArguments\n\nfd::Int: the file descriptor, which is closed\n\nOutput Example\n\n{\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/fileops/file_lock.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"file_lock","category":"page"},{"location":"reference/#PCloud.API.file_lock","page":"API Reference","title":"PCloud.API.file_lock","text":"file_lock(client::PCloudClient; kwargs...)\n\nLocks or unlocks a file descriptor fd.\n\nThis method works, depending on the type paramater:\n\n0: release a lock\n1: get a shared lock\n2: get an exclusive lock\n\nIf the offset parameter is provided, only bytes starting from this offset are locked.\n\nIf the length parameter is provided, only length bytes starting from offset are locked. Length of 0 means lock until the end of file (no matter how big it grows).\n\nThe offset of this method could be interpreted depending on whence parameter:- 0: offset is from the start of the file\n\n1: offset is from current offset\n2: offset is from the end of the file\n\nIf the parameter get is set, then instead of acquiring the lock only a test is performed if the file region can be locked.\n\nBy default locks are blocking, that is the call will block until the lock is granted (except when get is set or request is for unlocking). If you do not wish the lock to block, set the noblock parameter.\n\nLocks are advisory locks, that is, they are not enforced on readers/writers that are not trying to take a lock.\n\nYou may hold just one lock on a file region. If shared lock is to be converted to an exclusive lock, the conversion is not atomic - the shared lock MIGHT be released first, before acquiring the exclusive lock. That happens only if the request for the exclusive lock can not be satisfied at the moment. This is done to prevent two processes from deadlocking by first holding a shared lock on a file and later trying to convert it to an exclusive lock. Processes still can deadlock by acquiring TWO locks simultaneously (each) on different files/regions in different order.\n\nThe API servers do not perform any kind of deadlock detection.\n\nSource: https://docs.pcloud.com/methods/fileops/file_lock.html\n\nArguments\n\nfd::Int: the file descriptor, which is locked or unlocked\ntype::Int: what operation is performed to the file lock\n\nOptional Arguments\n\noffset::Int: lock only bytes, starting from this position (default for offset is 0)\nlength::Int: lock length bytes only, starting from offset (default for length is 0)\nwhence::Int: how to interpred the offset (default for whence is 0)\nget::Int: if set, then only test is performed if the file region can be locked\nnoblock::Int: set, if you do not wish the lock to block\n\nOutput\n\nThe call is always successful unless read/write error is encountered. Result will be 0 regardless if lock was granted or not.\n\nOne should check the return field locked to see if lock was granted. Unlocking always sets locked to true, the same goes for blocking requests, as they are always successful (sooner or later).\n\nSo with result of 0 checking the value of locked makes sense only for non-blocking locks and for get checks.\n\nOutput Example\n\n{\n    result: 0,\n    locked: true\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/#Newsletter","page":"API Reference","title":"Newsletter","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.newsletter_subscribe\nPCloud.newsletter_check\nPCloud.newsletter_verifyemail\nPCloud.newsletter_unsubscribe\nPCloud.newsletter_unsubscribemail","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/newsletter/newsletter_subscribe.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"newsletter_subscribe","category":"page"},{"location":"reference/#PCloud.API.newsletter_subscribe","page":"API Reference","title":"PCloud.API.newsletter_subscribe","text":"newsletter_subscribe(client::PCloudClient; kwargs...)\n\nSubscribes an email for pCloud Newsletter.\n\nIf the email was not already verified, then a link is sent in the mail. After using the link, the email owner will verify his email.\n\nSource: https://docs.pcloud.com/methods/newsletter/newsletter_subscribe.html\n\nArguments\n\nmail::String: the mail that is eneterd to the Newsletter list\n\nOutput\n\nIn the filed verifymail is true if a verify mail is sent.\n\nOutput Example\n\n{\n    verifymail: true,\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/newsletter/newsletter_check.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"newsletter_check","category":"page"},{"location":"reference/#PCloud.API.newsletter_check","page":"API Reference","title":"PCloud.API.newsletter_check","text":"newsletter_check(client::PCloudClient; kwargs...)\n\nChecks if the current logged usre is subscribed to pCloud Newsletter.\n\nSource: https://docs.pcloud.com/methods/newsletter/newsletter_check.html\n\nOutput\n\nThe filed subscribed is true, if the user was subscribed to the Newsletter.\n\nThe field verified is true, if the user had already verified his email, using a link, sent in a mail to his email address.\n\nOutput Example\n\n{\n    subscribed: true,\n    verified: false,\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/newsletter/newsletter_verifyemail.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"newsletter_verifyemail","category":"page"},{"location":"reference/#PCloud.API.newsletter_verifyemail","page":"API Reference","title":"PCloud.API.newsletter_verifyemail","text":"newsletter_verifyemail(client::PCloudClient; kwargs...)\n\nUses a code sent in a mail to the email, which the user had subscribed to the Newsletter. If the code is valid, then the user's email is marked as verified.\n\nSource: https://docs.pcloud.com/methods/newsletter/newsletter_verifyemail.html\n\nArguments\n\ncode::String: code, sent in a mail to the user\n\nOutput\n\nThe email that was marked as verified is set This is for security reasons.\n\nOutput Example\n\n{\n    result: 0,\n    email: \"newsletter@pcloud.com\"\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/newsletter/newsletter_unsubscribe.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"newsletter_unsubscribe","category":"page"},{"location":"reference/#PCloud.API.newsletter_unsubscribe","page":"API Reference","title":"PCloud.API.newsletter_unsubscribe","text":"newsletter_unsubscribe(client::PCloudClient; kwargs...)\n\nUses a code sent in a mail to the email, which the user had subscribed to the Newsletter. If the code is valid, then the user's email is unsubscribed.\n\nSource: https://docs.pcloud.com/methods/newsletter/newsletter_unsubscribe.html\n\nArguments\n\ncode::String: code, sent in a mail to the user\n\nOutput\n\nAlways sends result=0, even if the user was never added to the Newsletter. This is for security reasons.\n\nOutput Example\n\n{\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/newsletter/newsletter_unsibscribemail.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"newsletter_unsubscribemail","category":"page"},{"location":"reference/#PCloud.API.newsletter_unsubscribemail","page":"API Reference","title":"PCloud.API.newsletter_unsubscribemail","text":"newsletter_unsubscribemail(client::PCloudClient; kwargs...)\n\nSends an email to the given mail with a code, that could be used to unsubcribe the email from the Newsletter.\n\nThis email is sent to a mail that was added to the newsletter, but it is not necessary to be verified.\n\nSource: https://docs.pcloud.com/methods/newsletter/newsletter_unsibscribemail.html\n\nArguments\n\ncode::String: code, sent in a mail to the user\n\nOutput\n\nAlways sends result=0, even if the email was never sent. This is for security reasons.\n\nOutput Example\n\n{\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/#Trash","page":"API Reference","title":"Trash","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.trash_list\nPCloud.trash_restorepath\nPCloud.trash_restore\nPCloud.trash_clear","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/trash/trash_list.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"trash_list","category":"page"},{"location":"reference/#PCloud.API.trash_list","page":"API Reference","title":"PCloud.API.trash_list","text":"trash_list(client::PCloudClient; kwargs...)\n\nLists the contents of a folder in the Trash.\n\nThe root folder of the Trash has id='0'.\n\nOutputs the metadata of the folder. This metadata will have contents field that is array of metadatas of folder's contents.\n\nNote that the metadata from this function has the additional field origparentfolderid in the metadata. This is the folder, in which the file or folder was, before it was moved to Trash.\n\nSo the field parentfolderid is showing the position in the Trash.\n\nOnly files and folders that belong to the current user will be outputed from this method.\n\nRecursively listing a Trash folder is not an expensive operation.\n\nThis method is very simillar to listfolder\n\nSource: https://docs.pcloud.com/methods/trash/trash_list.html\n\nOptional Arguments\n\nfolderid::Int: the id of the Trash folder. The default is 0 - the root of the Trash.\nnofiles::Int: If set, then no files will be included in the Trash list - only folders.\nrecursive::Int: If set, then the list will be recursive - the subfolders will have their folders and files included.\n\nOutput\n\nOn success returns the metadata and the contents of the folder from the Trash.\n\nOutput Example\n\n{\n    result: 0,\n    metadata: {\n        thumb: false,\n        path: \"/\",\n        isfolder: true,\n        isshared: false,\n        ismine: true,\n        modified: \"Mon, 16 Sep 2013 12:10:32 +0000\",\n        created: \"Mon, 16 Sep 2013 12:10:32 +0000\",\n        name: \"/\",\n        folderid: 0,\n        isdeleted: true,\n        icon: \"folder\",\n        id: \"d0\",\n        contents: [\n            {\n                name: \"Deleted folder\",\n                folderid: 236427,\n                id: \"d236427\",\n                origparentfolderid: 123,\n                parentfolderid: 0,\n                thumb: false,\n                isfolder: true,\n                isshared: false,\n                ismine: true,\n                modified: \"Sat, 14 Dec 2013 13:37:33 +0000\",\n                created: \"Tue, 03 Dec 2013 15:50:22 +0000\",\n                isdeleted: true,\n                icon: \"folder\",\n                contents: [ ]\n            },\n            {\n                name: \"Deleted file\",\n                id: \"f76543\",\n                fileid: 76543,\n                origparentfolderid: 6543,\n                parentfolderid: 0,\n                category: 3,\n                icon: \"audio\",\n                contenttype: \"audio/x-mpegurl\",\n                hash: 17079372075467340000,\n                size: 759,\n                isfolder: false,\n                thumb: false,\n                isshared: false,\n                modified: \"Wed, 18 Sep 2013 10:18:46 +0000\",\n                created: \"Wed, 18 Sep 2013 10:18:14 +0000\",\n                ismine: true,\n                isdeleted: true\n            }\n        ]\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/trash/trash_restorepath.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"trash_restorepath","category":"page"},{"location":"reference/#PCloud.API.trash_restorepath","page":"API Reference","title":"PCloud.API.trash_restorepath","text":"trash_restorepath(client::PCloudClient; kwargs...)\n\nFor a desired file or folder from the Trash, calculates where to restore.\n\nThis method is granted that will choose such the destination folder, that ismine is true.\n\nIf the parent folder is also deleted, then this method will calculate the path by going to the parent of the folder. That way the file or folder will be restored at most at the root of the file system.\n\nAlso, if there are some name conflicts, then a new name will be generated, that is Name (k) , if there are k-1 files with the same name.\n\nSource: https://docs.pcloud.com/methods/trash/trash_restorepath.html\n\nArguments\n\nfileid::Int: file id of the file that would be restored\nfolderid::Int: folder id of the folder that would be restored\n\nUse fileid or folderid\n\nOutput\n\nOn success returns the follwing metadatas\n\nmetadata: Information how the file or folder will look after restoring\ndestination: Information about the calculated destination of the restored foldre\n\nOutput Example\n\n{\n    result: 0,\n    metadata: {\n        name: \"Deleted folder\",\n        id: \"d56986\",\n        folderid: 56986,\n        parentfolderid: 56980,\n        isdeleted: true,\n        ismine: true,\n        icon: \"folder\",\n        created: \"Mon, 03 Feb 2014 15:02:56 +0000\",\n        modified: \"Mon, 03 Feb 2014 15:03:13 +0000\",\n        isfolder: true,\n        thumb: false,\n        isshared: true\n    },\n    destination: {\n        name: \"The destination folder\",\n        id: \"d56980\",\n        folderid: 56980,\n        parentfolderid: 0,\n        ismine: true,\n        icon: \"folder\",\n        created: \"Fri, 31 Jan 2014 12:57:56 +0000\",\n        modified: \"Mon, 03 Feb 2014 15:04:32 +0000\",\n        isfolder: true,\n        thumb: false,\n        isshared: true\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/trash/trash_restore.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"trash_restore","category":"page"},{"location":"reference/#PCloud.API.trash_restore","page":"API Reference","title":"PCloud.API.trash_restore","text":"trash_restore(client::PCloudClient; kwargs...)\n\nRestores files or folders from the Trash back to the filesystem.\n\nThe destination, where the data will be restored can be automatically calculated via trash_restorepath or it could be specified by the user (use restoreto parameter).\n\nIf folderid='0', then all data in the Trash will be restored, as close to their original positions, as possible. If restoreto is set, then all data in the Trash will be placed into this folder.\n\nIf the destination is a shared folder, then a user to which the folder was shared, will need CREATE access to the folder.\n\nIf the current user used space + the resotred files size is greater than the user quota, then this method will restore, until the first file that goes over quota is restored. Then it will raise an error.\n\nSource: https://docs.pcloud.com/methods/trash/trash_restore.html\n\nArguments\n\nfileid::Int: file id of the restored file\nfolderid::Int: folder id of the restored folder\n\nUse fileid or folderid\n\nOptional Arguments\n\nrestoreto::Int: If given, then this folder will be chosen as a destination of the restored data.\nmetadata::Int: If set and restoring a folder, then the metadata of the folder will have contents filled with the information about files and folders in the restired folder.\n\nOutput\n\nOn success returns the metadata of the restored file or folder.\n\nIf the root of the trash is restored and restoreto is specified, then the metadata is shown for the restoreto folder.\n\nElse if restoreto is not specified, then result is a list restored of metadatas of the restored files / folders.\n\nOutput Example\n\n{\n    result: 0,\n    metadata: {\n        name: \"Deleted folder\",\n        folderid: 236427,\n        id: \"d236427\",\n        parentfolderid: 0,\n        thumb: false,\n        isfolder: true,\n        isshared: false,\n        ismine: true,\n        modified: \"Sat, 16 Dec 2013 16:20:00 +0000\",\n        created: \"Tue, 03 Dec 2013 15:50:22 +0000\",\n        isdeleted: false,\n        icon: \"folder\",\n        contents: [\n        ]\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/trash/trash_clear.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"trash_clear","category":"page"},{"location":"reference/#PCloud.API.trash_clear","page":"API Reference","title":"PCloud.API.trash_clear","text":"trash_clear(client::PCloudClient; kwargs...)\n\nDeletes\n\npermanently files or folders from the Trash.\n\nFiles and folders deleted via this method cannot be restored.\n\nIf folderid='0', then all data from the Trash will be removed.\n\nSource: https://docs.pcloud.com/methods/trash/trash_clear.html\n\nArguments\n\nfileid::Int: file id of the file that is removed from Trash\nfolderid::Int: folder id of the folder that is removed from Trash\n\nUse fileid or folderid\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/#Collection","page":"API Reference","title":"Collection","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.collection_list\nPCloud.collection_details\nPCloud.collection_create\nPCloud.collection_rename\nPCloud.collection_delete\nPCloud.collection_linkfiles\nPCloud.collection_unlinkfiles\nPCloud.collection_move","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/collection/collection_list.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"collection_list","category":"page"},{"location":"reference/#PCloud.API.collection_list","page":"API Reference","title":"PCloud.API.collection_list","text":"collection_list(client::PCloudClient; kwargs...)\n\nGet a list of the collections, that are owned from the current user.\n\nOptionally, the items in the collections could be returned and the collections could be filtered by type.\n\nThe system collections of the current user are genereated on the first call of this method.\n\nThis method removes from the collection all items that could not be found at the time of invocation. Reasons are, for example, the files were moved to trash or there were in a shared folder, that now is not shared.\n\nSource: https://docs.pcloud.com/methods/collection/collection_list.html\n\nOptional Arguments\n\ntype::Int: Filter type of the collection. 1 is for playlists.\nshowfiles::Int: If set, then contents of the collection will be filled with metadata of the files in the collection.\npagesize::Int: If set and showfiles is set, then the items in contents will be limited to this count.\n\nOutput\n\nOn success returns the collections and optionally the metadata of the first items in the collection in the field contents.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"collections\": [\n        {\n            \"name\": \"my music\",\n            \"id\": 40,\n            \"ismine\": true,\n            \"items\": 8,\n            \"system\": false,\n            \"type\": \"audio\",\n            \"created\": \"Thu, 13 Feb 2014 12:34:22 +0000\",\n            \"modified\": \"Mon, 17 Feb 2014 11:25:55 +0000\",\n            \"contents\": [ ]\n        } ,\n        { \n            \"name\": \"Most Listened\",\n            \"id\": 38,\n            \"ismine\": true,\n            \"items\": 0,\n            \"system\": true,\n            \"type\": \"audio\",\n            \"created\": \"Wed, 12 Feb 2014 11:51:00 +0000\",\n            \"modified\": \"Wed, 12 Feb 2014 11:51:00 +0000\",\n            \"contents\": [ ]\n        } ,\n\n        ...\n\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/collection/collection_details.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"collection_details","category":"page"},{"location":"reference/#PCloud.API.collection_details","page":"API Reference","title":"PCloud.API.collection_details","text":"collection_details(client::PCloudClient; kwargs...)\n\nGet details for a given collection and the items in it.\n\nOptionally, paging could be used for the results in the collection.\n\nThis method removes from the collection all items that could not be found at the time of invocation. Reasons are, for example, the files were moved to trash or there were in a shared folder, that now is not shared. For that reason, when paging is used, the page could have less results than the pagesize and more pages to be available.\n\nSource: https://docs.pcloud.com/methods/collection/collection_details.html\n\nArguments\n\ncollectionid::Int: the id of the collection.\n\nOptional Arguments\n\npage::Int: the number of the page, for which results are shown.\npagesize::Int: the size of the page.\n\nDefault page is 0, which is all items.\n\nOutput\n\nOn success returns the collection and the metadata of the items in the field contents.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"collection\": {\n        \"id\": 40,\n        \"type\": \"audio\",\n        \"system\": false,\n        \"ismine\": true,\n        \"items\": 11,\n        \"created\": \"Thu, 13 Feb 2014 12:34:22 +0000\",\n        \"modified\": \"Tue, 18 Feb 2014 11:16:24 +0000\",\n        \"name\": \"my music\",\n        \"contents\": [\n            {\n                \"id\": \"f599457\",\n                \"fileid\": 599457,\n                \"name\": \"Demo Audio 2.mp3\",\n                \"parentfolderid\": 21383,\n\n                \"position\": 1,\n                \"added\": \"Mon, 17 Feb 2014 15:53:48 +0000\",\n\n                \"isshared\": false,\n                \"category\": 3,\n                \"ismine\": true,\n                \"icon\": \"audio\",\n                \"created\": \"Mon, 16 Sep 2013 12:10:32 +0000\",\n                \"hash\": 1682158607045670700,\n                \"isfolder\": false,\n                \"contenttype\": \"audio/mpeg\",\n                \"modified\": \"Mon, 16 Sep 2013 12:10:32 +0000\",\n                \"size\": 142376,\n                \"thumb\": false\n            },\n\n            ...\n\n        ]\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/collection/collection_create.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"collection_create","category":"page"},{"location":"reference/#PCloud.API.collection_create","page":"API Reference","title":"PCloud.API.collection_create","text":"collection_create(client::PCloudClient; kwargs...)\n\nCreate a new collection for the current user.\n\nOptionally, files could be given for the collection to fill it.\n\nSource: https://docs.pcloud.com/methods/collection/collection_create.html\n\nArguments\n\nname::Int: the name of the new collection.\n\nOptional Arguments\n\ntype::Int: type of the collection.\nfileids::String: comma-separated list of files to fill the collection.\n\nDefault type is 1 - playlist.\n\nOutput\n\nOn success returns the new collection and the metadata of the items in the field contents, if such were given.\n\nAlso field linkresult will be added, if there were files to fill the collection. For its structure look at collection_linkfiles. If the linking was unsuccessful, then this field will be false.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"collection\": [\n        {\n            \"name\": \"my music\",\n            \"id\": 40,\n            \"ismine\": true,\n            \"items\": 8,\n            \"system\": false,\n            \"type\": \"audio\",\n            \"created\": \"Thu, 13 Feb 2014 12:34:22 +0000\",\n            \"modified\": \"Mon, 17 Feb 2014 11:25:55 +0000\",\n            \"contents\": [ ]\n        }\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/collection/collection_rename.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"collection_rename","category":"page"},{"location":"reference/#PCloud.API.collection_rename","page":"API Reference","title":"PCloud.API.collection_rename","text":"collection_rename(client::PCloudClient; kwargs...)\n\nRenames a given collection owned by the current user.\n\nSource: https://docs.pcloud.com/methods/collection/collection_rename.html\n\nArguments\n\ncollectionid::Int: the id of the collection.\nname::String: the new name of the collection.\n\nOutput\n\nOn success returns the modified collection.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"collection\": [\n        {\n            \"name\": \"my music\",\n            \"id\": 40,\n            \"ismine\": true,\n            \"items\": 8,\n            \"system\": false,\n            \"type\": \"audio\",\n            \"created\": \"Thu, 13 Feb 2014 12:34:22 +0000\",\n            \"modified\": \"Mon, 17 Feb 2014 11:25:55 +0000\",\n            \"contents\": [ ]\n        }\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/collection/collection_delete.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"collection_delete","category":"page"},{"location":"reference/#PCloud.API.collection_delete","page":"API Reference","title":"PCloud.API.collection_delete","text":"collection_delete(client::PCloudClient; kwargs...)\n\nDelete a given collection owned by the current user.\n\nSystem collections could not be deleted. In this case error 2065 (Collection not found.) will be raised.\n\nSource: https://docs.pcloud.com/methods/collection/collection_delete.html\n\nArguments\n\ncollectionid::Int: the id of the collection.\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/collection/collection_linkfiles.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"collection_linkfiles","category":"page"},{"location":"reference/#PCloud.API.collection_linkfiles","page":"API Reference","title":"PCloud.API.collection_linkfiles","text":"collection_linkfiles(client::PCloudClient; kwargs...)\n\nAppends files to the collection.\n\nThe files will be added at the end of the collection. If you want to insert the files at another position, then link them via this method and then use collection_move.\n\nThis method preserves the relative order given in the fileids field.\n\nDuplicates are not allowed to be met in the collections.\n\nSource: https://docs.pcloud.com/methods/collection/collection_linkfiles.html\n\nArguments\n\ncollectionid::Int: the id of the collection.\nfileids::String: comma-separated list of ids of the files to be added.\n\nOptional Arguments\n\nnoitems::Int: if set, then linkresult will be empty\n\nOutput\n\nOn success returns the updated collection.\n\nlinkresult contains the result for all items, unless noitems is set. It has the format:\n\nresult::Int: code of the operation. 0 means success, otherwise the file could not be linked.\nfileid::Int: the id of the file that is linked\nmessage::String: if an error occures, then this the message of the error. Not set, if successful.\nmetadata::metadata: the metadata of the linked file, if linked successfully. The fields are added:position - where the item is added to the collectionadded - when the item was linked to the collection\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"linkresult\": [\n    {\n        \"fileid\": \"599457\",\n        \"result\": 0,\n        \"metadata\": {\n            \"id\": \"f599457\",\n            \"fileid\": 599457,\n            \"contenttype\": \"audio/mpeg\",\n\n            \"position\": 9,\n            \"added\": \"Tue, 18 Feb 2014 11:16:24 +0000\",\n\n            \"created\": \"Mon, 16 Sep 2013 12:10:32 +0000\",\n            \"modified\": \"Mon, 16 Sep 2013 12:10:32 +0000\",\n            \"hash\": 1682158607045670700,\n            \"icon\": \"audio\",\n            \"parentfolderid\": 21383,\n            \"ismine\": true,\n            \"isshared\": false,\n            \"isfolder\": false,\n            \"name\": \"Demo Audio 2.mp3\",\n            \"category\": 3,\n            \"thumb\": false,\n            \"size\": 1442376\n        }\n    },\n    {\n        \"fileid\": \"123\",\n        \"result\": 2009,\n        \"message\": \"File not found.\"\n    },\n\n    ...\n\n    ],\n    \"collection\": {\n        \"id\": 40,\n        \"name\": \"my music\",\n        \"type\": \"audio\",\n        \"ismine\": true,\n        \"system\": false,\n        \"items\": 11,\n        \"created\": \"Thu, 13 Feb 2014 12:34:22 +0000\",\n        \"modified\": \"Tue, 18 Feb 2014 11:16:24 +0000\",\n        \"contents\": []\n    }\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/collection/collection_unlinkfiles.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"collection_unlinkfiles","category":"page"},{"location":"reference/#PCloud.API.collection_unlinkfiles","page":"API Reference","title":"PCloud.API.collection_unlinkfiles","text":"collection_unlinkfiles(client::PCloudClient; kwargs...)\n\nRemove files from a current collection.\n\nThere are three methods to remove files from the collection:\n\nall items in the collectionsremove fileids from the collectionremove items at given positionsThe priority is the method checks is position, then all , then fileids.\n\nSource: https://docs.pcloud.com/methods/collection/collection_unlinkfiles.html\n\nArguments\n\ncollectionid::Int: the id of the collection.\n\nOptional Arguments\n\nall::Int: if set, all files from the collection are unlinked\npositions::String: comma-separated list of positions to be unlinked\nfileids::String: comma-separated list of fileids to be unlinked\n\nNote: Use one of this parameters.\n\nOutput\n\nOn success returns the modified collection.\n\nOutput Example\n\n{\n    \"result\": 0,\n    \"collection\": [\n        {\n            \"name\": \"my music\",\n            \"id\": 40,\n            \"ismine\": true,\n            \"items\": 8,\n            \"system\": false,\n            \"type\": \"audio\",\n            \"created\": \"Thu, 13 Feb 2014 12:34:22 +0000\",\n            \"modified\": \"Mon, 18 Feb 2014 14:25:55 +0000\",\n            \"contents\": [ ]\n        }\n    ]\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/collection/collection_move.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"collection_move","category":"page"},{"location":"reference/#PCloud.API.collection_move","page":"API Reference","title":"PCloud.API.collection_move","text":"collection_move(client::PCloudClient; kwargs...)\n\nChanges the position of an item in a given colleciton, owned by the current user.\n\nSource: https://docs.pcloud.com/methods/collection/collection_move.html\n\nArguments\n\ncollectionid::Int: the id of the collection.\nitem::Int: the position of the item in the collection.\nfileid::Int: the id of the file to be moved in the collection.\nposition::Int: the position to which the items to be placed.\n\nOutput Example\n\n{\n    \"result\": 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/#OAuth-2.0","page":"API Reference","title":"OAuth 2.0","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.authorize\nPCloud.oauth2_token","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/oauth_2.0/authorize.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"authorize","category":"page"},{"location":"reference/#PCloud.API.authorize","page":"API Reference","title":"PCloud.API.authorize","text":"authorize(client::PCloudClient; kwargs...)\n\nThis is a web page which starts the OAuth 2.0 authorization flow. On this page he user logs in to pCloud and then desides if to grant the access to your app.\n\nAfter the user takes the decision to give or not access from your application to his profile information and personal data, they will be redirected to the URI specified bv redirect_uri.\n\nOAuth 2.0 has two different authorization flows:\n\nCode flow - returns a code via the redirect_uri redirect. This code after that should be converted inot a bearer token using oauth2_token method.\n\nToken (implicit) flow - returns the bearer token via the redirect_uri redirect. It does not rquires your app to initiate a second call to pCloud API.\n\nCode flow is recommended if the app is using a server.\n\nToken flow is appropriate for pure client-side apps - such for mobile devices or based only on JavaScript.\n\nSource: https://docs.pcloud.com/methods/oauth_2.0/authorize.html\n\nArguments\n\nclient_id::String: id of the app.\nresponse_type::String: code or token.\n\nOptional Arguments\n\nredirect_uri::String: where to redirect after approval, mandatory for token, optional for code (code will be displayed to the user in this case).\nstate::String: opaque data that will be passed back to redirect_uri.\nforce_reapprove::Bool: if set, will force re-approval even if the application is already approved by the user.\npermissions::manageshares: a comma (,) separated list. If set additional permissions will appear in the approval form. Currently the only option is\n\nOutput\n\nOn approval redirects to:\n\nCode flow\n\nThese parameters are pased in the query string (after ?)\n\ncode::String: The authorization code that could be exchanged for a bearer token by calling oauth2_token\nstate::String: The contents of the state parameter, that was passed.\n\nredirect_uri?code=XXXXX&state=YYYYY\n\nToken flow\n\nThese parameters are pased in the URI fragment (after #)- access_token::String: A token that could be used to call pCloud API methods.\n\ntoken_type::String: The type of the token (always bearer).\nuid::Int: The ID of the user, who gave access to the app.\nstate::String: The contents of the state parameter, that was passed.\n\nredirecturi#accesstoken=XXXXX&token_type=bearer&\n\nuid=11111&state=YYYYYY\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/oauth2.0/oauth2token.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"oauth2_token","category":"page"},{"location":"reference/#PCloud.API.oauth2_token","page":"API Reference","title":"PCloud.API.oauth2_token","text":"oauth2_token(client::PCloudClient; kwargs...)\n\nThis method is used when an app is using the code flow. The app calls this method to obtain a bearer token, after the user had authorized the app.\n\nThis method expects the app's key and secret.\n\nAlso the code received from the redirect from oauth2_token is required.\n\nSource: https://docs.pcloud.com/methods/oauth2.0/oauth2token.html\n\nArguments\n\nclient_id::String: - id of the application\nclient_secret::String: - secret code for the application\ncode::code: - code returned to the redirect from authorize page\n\nOutput\n\nAfter the code is validted, the method returns the object with fields:\n\naccess_token::String: A token that could be used to call pCloud API methods.\ntoken_type::String: The type of the token (always bearer).\nuid::Int: The ID of the user, who gave access to the app.\n\nOutput Example\n\n{\n    result: 0,\n    access_token: \"dghdghdj\",\n    token_type: \"bearer\",\n    uid: 34535\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/#Transfer","page":"API Reference","title":"Transfer","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PCloud.uploadtransfer\nPCloud.uploadtransferprogress","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/transfer/uploadtransfer.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"uploadtransfer","category":"page"},{"location":"reference/#PCloud.API.uploadtransfer","page":"API Reference","title":"PCloud.API.uploadtransfer","text":"uploadtransfer(client::PCloudClient; kwargs...)\n\nDoes a file(s) transfer in way that creates and sends transfer links to receiver emails.\n\nSource: https://docs.pcloud.com/methods/transfer/uploadtransfer.html\n\nArguments\n\nsendermail::String: mail of the sender\nreceivermails::String: mail(s) of the receivers(up to 20) separated by ,\n\nOptional Arguments\n\nmessage::String: short message(up to 160 characters) acting as a comment to the receivers\nprogresshash::String: hash used for observing transfer progress\n\nOutput Example\n\n{\n    result: 0\n}\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"API documentation source: https://docs.pcloud.com/methods/transfer/uploadtransferprogress.html","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"uploadtransferprogress","category":"page"},{"location":"reference/#PCloud.API.uploadtransferprogress","page":"API Reference","title":"PCloud.API.uploadtransferprogress","text":"uploadtransferprogress(client::PCloudClient; kwargs...)\n\nMonitor the progress of transfered files.\n\nSource: https://docs.pcloud.com/methods/transfer/uploadtransferprogress.html\n\nArguments\n\nprogresshash::String: hash defining the transfer, same as sent to uploadtransfer\n\nOutput\n\nReturns same data as uploadprogress.\n\n\n\n\n\n","category":"function"},{"location":"#PCloud","page":"Home","title":"PCloud","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PCloud.jl is the Julia implementation of the pCloud api. It has full cover of all pCloud API methods with additional functions to simplify user experience and can be used for storing, downloading and sharing various documents and data. Julia integration makes it possible to manipulate with data in-memory and then store data in the cloud. Everything can be done on the fly, for example image processing or data compressing, refer to Usage examples.","category":"page"},{"location":"developers/#Developer-guide","page":"Developer guide","title":"Developer guide","text":"","category":"section"},{"location":"developers/","page":"Developer guide","title":"Developer guide","text":"Please note, that api functions themselves are not written manually, but rather automatically generated by parsing https://docs.pcloud.com site. So, if you find any inconsistences, missing docstrings or missing methods please do not make changes to src/pcloud_api.jl. Instead you should change scraping script accordingly. This script can be found in extras directory and in order to build new methods you should do the following","category":"page"},{"location":"developers/","page":"Developer guide","title":"Developer guide","text":"sh> cd extras\nsh> julia\njulia> ]\npkg> activate .\n(extras)> instantiate","category":"page"},{"location":"developers/","page":"Developer guide","title":"Developer guide","text":"After that you can exit julia session and run","category":"page"},{"location":"developers/","page":"Developer guide","title":"Developer guide","text":"sh> julia make.jl","category":"page"},{"location":"developers/","page":"Developer guide","title":"Developer guide","text":"command. It will create two files:","category":"page"},{"location":"developers/","page":"Developer guide","title":"Developer guide","text":"src/pcloud_api.jl which contains all methods names and corresponding docstrings\ndocs/src/reference.md which contains complete API Reference page.","category":"page"}]
}
